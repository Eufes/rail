#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда 
	
Функция ИдентификаторТипаИсходящегоУникален(Объект, Отказ) Экспорт
	
	ТекстСообщения = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТипИсходящегоСообщения.Представление КАК Представление,
	|	ТипИсходящегоСообщения.Код КАК Код
	|ИЗ
	|	Справочник.EUF_ПроводникТипИсходящегоСообщения КАК ТипИсходящегоСообщения
	|ГДЕ
	|	ТипИсходящегоСообщения.ТехническоеИмя = &ТехническоеИмя
	|	И ТипИсходящегоСообщения.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("ТехническоеИмя", Объект.ТехническоеИмя);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСообщения = СтрШаблон("Тип исходящего сообщения с таким техническим именем (мнемокодом) уже существует %1 %2",
									Выборка.Код, Выборка.Представление);		
		Отказ = Истина;							
		Возврат ТекстСообщения;		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция УстановленСинхронныйРежим(ТипИсходящегоСообщения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	EUF_ПроводникИспользуемыеНастройкиДляСообщенийСрезПоследних.НастройкаДляСообщения КАК НастройкаДляСообщения
	|ПОМЕСТИТЬ Настройки
	|ИЗ
	|	РегистрСведений.EUF_ПроводникИспользуемыеНастройкиДляСообщений.СрезПоследних(, ТипСообщения = &ТипИсходящегоСообщения) КАК EUF_ПроводникИспользуемыеНастройкиДляСообщенийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Настройки.НастройкаДляСообщения КАК НастройкаКвитанцииСсылка,
	|	ЕСТЬNULL(EUF_ПроводникНастройкиИсходящихСообщений.СинхронныйРежим, ЛОЖЬ) КАК СинхронныйРежим
	|ИЗ
	|	Настройки КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.EUF_ПроводникНастройкиИсходящихСообщений КАК EUF_ПроводникНастройкиИсходящихСообщений
	|		ПО Настройки.НастройкаДляСообщения = EUF_ПроводникНастройкиИсходящихСообщений.Ссылка";
	Запрос.УстановитьПараметр("ТипИсходящегоСообщения", ТипИсходящегоСообщения);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СинхронныйРежим = Ложь;
	Если Выборка.Следующий() Тогда
		СинхронныйРежим = Выборка.СинхронныйРежим;		
	КонецЕсли;
	
	Возврат СинхронныйРежим;
	
КонецФункции

#КонецЕсли