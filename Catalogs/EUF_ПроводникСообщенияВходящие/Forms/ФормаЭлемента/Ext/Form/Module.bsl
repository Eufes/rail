#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьОформлениеДоступностьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПредставлениеДанных <> "" Тогда
		
		ДанныеСжато = Новый ХранилищеЗначения(ПредставлениеДанных, Новый СжатиеДанных(9));
		
		МенеджерЗаписей = РегистрыСведений.EUF_ПроводникДанныеВФорматеТранспорта.СоздатьМенеджерЗаписи();
		МенеджерЗаписей.Сообщение = ТекущийОбъект.Ссылка;		
		МенеджерЗаписей.ДанныеОбмена = ДанныеСжато;
		
		МенеджерЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ОтобразитьПредставлениеДанных();	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДанныхПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвязьСДругимиСообщениямиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.Ссылка = Объект.Ссылка Тогда
			Возврат;			
		ИначеЕсли ТипЗнч(ТекДанные.Ссылка) = Тип("СправочникСсылка.EUF_ПроводникСообщенияИсходящие") Тогда
			ПараметрыОткрытия = Новый Структура("Ключ", ТекДанные.Ссылка);
			ОткрытьФорму("Справочник.EUF_ПроводникСообщенияИсходящие.Форма.ФормаЭлемента", ПараметрыОткрытия);
		ИначеЕсли ТипЗнч(ТекДанные.Ссылка) = Тип("СправочникСсылка.EUF_ПроводникСообщенияВходящие") Тогда
			ПараметрыОткрытия = Новый Структура("Ключ", ТекДанные.Ссылка);
			ОткрытьФорму("Справочник.EUF_ПроводникСообщенияВходящие.Форма.ФормаЭлемента", ПараметрыОткрытия);
		Иначе	
			Возврат;
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвязьСДругимиСообщениямиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СвязьСДругимиСообщениями.ТекущиеДанные;
	ВыбранноеСообщение = ?(ТекущиеДанные <> Неопределено, ТекущиеДанные.Ссылка, Неопределено);
	УстановитьПараметрВИсторииСообщенияСервер(ВыбранноеСообщение);
	УстановитьПараметрВЗаписиОчереди(ВыбранноеСообщение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСообщение(Команда)
	
	Таймаут = 60;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстПредупреждения = "Объект не записан. Корректно создать сообщение, возможно через консоль управления.
		| в ином случае обработка также может быть некорректной.";
		ПоказатьПредупреждение(, ТекстПредупреждения,
			Таймаут, "Сообщение не записано");
	Иначе	
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСообщениеЗавершение", ЭтотОбъект);
		ТекстВопроса = 
		"Будет выполнена обработка сообщения по актуальным настройкам,
		| НЕЗАВИСИМО от текущего статуса и наличия ошибок. Продолжить?";		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, Таймаут);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСообщениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработатьСообщениеНаСервере(Объект.Ссылка); 
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьСообщениеНаСервере(ВходящееСообщение)
	
	EUF_ПроводникОбмен.ОбработатьОдноВходящееСообщение(ВходящееСообщение);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиТекущееСообщение(Команда) 
	
	ОпределитьСтрокуТекущегоСообщенияВСпискеСвязанных();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОформлениеДоступностьВидимость()
	
	ОтобразитьПредставлениеДанных();
	
	УстановитьОтборыДинамическихСписков();
			
	ДоступностьРучнойОбработки = Не Параметры.Ключ.Пустая();
	Элементы.ФормаОбработатьСообщение.Доступность = ДоступностьРучнойОбработки; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрВИсторииСообщенияСервер(ЭлементОтбора = Неопределено)
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Объект.Ссылка;
	КонецЕсли;
	
	ПараметрТекущаяСсылка = ИсторияВыбранногоСообщения.Параметры.Элементы.Найти("ВыбранноеСообщение");
	ПараметрТекущаяСсылка.Использование = Истина;
	ПараметрТекущаяСсылка.Значение = ЭлементОтбора;	
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьПараметрВЗаписиОчереди(ЭлементОтбора = Неопределено)
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Объект.Ссылка;
	КонецЕсли;
	
	ПараметрТекущаяСсылка = ЗаписьВИсходящейОчереди.Параметры.Элементы.Найти("ВыбранноеСообщение");
	ПараметрТекущаяСсылка.Использование = Истина;
	ПараметрТекущаяСсылка.Значение = ЭлементОтбора;
	
	ПараметрТекущаяСсылка = ЗаписьВоВходящейОчереди.Параметры.Элементы.Найти("ВыбранноеСообщение");
	ПараметрТекущаяСсылка.Использование = Истина;
	ПараметрТекущаяСсылка.Значение = ЭлементОтбора;  
	
	Если ТипЗнч(ЭлементОтбора) = Тип("СправочникСсылка.EUF_ПроводникСообщенияИсходящие") Тогда
		Элементы.ЗаписьВИсходящейОчереди.Видимость = Истина;
		Элементы.ЗаписьВоВходящейОчереди.Видимость = Ложь;
	Иначе
		Элементы.ЗаписьВИсходящейОчереди.Видимость = Ложь;
		Элементы.ЗаписьВоВходящейОчереди.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияВыбранногоСообщенияПриАктивизацииСтроки(Элемент)
	УстановитьТекстОписанияСобытия();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстОписанияСобытия()
	
	ТекущиеДанные = Элементы.ИсторияВыбранногоСообщения.ТекущиеДанные;
	ТекстОписанияСобытия = ?(ТекущиеДанные <> Неопределено, ТекущиеДанные.ОписаниеСобытия, "");	
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПредставлениеДанных()
	
	Если Не Параметры.Ключ.Пустая() Тогда
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	EUF_ПроводникДанныеВФорматеТранспорта.ДанныеОбмена КАК ДанныеОбмена,
		|	EUF_ПроводникДанныеВФорматеТранспорта.ОписаниеФормата КАК ОписаниеФормата
		|ИЗ
		|	РегистрСведений.EUF_ПроводникДанныеВФорматеТранспорта КАК EUF_ПроводникДанныеВФорматеТранспорта
		|ГДЕ
		|	EUF_ПроводникДанныеВФорматеТранспорта.Сообщение = &Сообщение";
		Запрос.УстановитьПараметр("Сообщение", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ОписаниеФормата = Выборка.ОписаниеФормата;
			ДанныеЗаписи = Выборка.ДанныеОбмена.Получить(); 
					
			Если ЗначениеЗаполнено(ДанныеЗаписи) Тогда
				Если ТипЗнч(ДанныеЗаписи) = Тип("Строка") Тогда 
					ПредставлениеДанных = ДанныеЗаписи;
				Иначе
					Элементы.ПредставлениеДанных.ПодсказкаВвода = "Данные не в строковом формате";				
				КонецЕсли;
			Иначе
				Элементы.ПредставлениеДанных.ПодсказкаВвода = "Нет данных для отображения";	
			КонецЕсли;			
		КонецЕсли; 		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическихСписков()
	
	ПараметрТекущаяСсылка = СвязьСДругимиСообщениями.Параметры.Элементы.Найти("ТекущаяСсылка");
	ПараметрТекущаяСсылка.Использование = Истина;
	ПараметрТекущаяСсылка.Значение = Объект.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СообщенияВходящие.ТипСообщения.ИнтеграционныйПроцесс, ЗНАЧЕНИЕ(Справочник.EUF_ПроводникИнтеграционныеПроцессы.ПустаяССылка)) КАК ИнтеграционныйПроцесс
	|ИЗ
	|	Справочник.EUF_ПроводникСообщенияВходящие КАК СообщенияВходящие
	|ГДЕ
	|	СообщенияВходящие.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();	
	Выборка.Следующий();
	ПараметрИнтеграционныйПроцесс = СвязьСДругимиСообщениями.Параметры.Элементы.Найти("ИнтеграционныйПроцесс");
	ПараметрИнтеграционныйПроцесс.Использование = Истина;
	ПараметрИнтеграционныйПроцесс.Значение = Выборка.ИнтеграционныйПроцесс;
		
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);	
	Диалог.Заголовок 				= "Выберите файл";	
	Диалог.Фильтр					= "Текстовый (*.txt)|*.txt|XML (*.xml)|*.xml|JSON (*.json)|*.json|ALL (*.*)|*.*"; 
	Диалог.Расширение				= "txt,xml,json,all";
	Диалог.ПредварительныйПросмотр 	= Ложь;
	Диалог.ИндексФильтра 			= 0;
	Диалог.ПолноеИмяФайла 			= Объект.ИдентификаторСообщения; 		
	Диалог.МножественныйВыбор 		= Ложь;
	
	ДополнительныеПараметры = Новый Структура("Диалог", Диалог);
	ОповещениеЗавершения = Новый ОписаниеОповещения("СохранитьВФайлЗавершение", ЭтотОбъект,
			ДополнительныеПараметры);
	
	Диалог.Показать(ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;	
	
	Если Не (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;	
	
	ПолноеИмяФайла = Диалог.ПолноеИмяФайла;
	
	ЗаписьДанных = Новый ЗаписьДанных(ПолноеИмяФайла);
	ЗаписьДанных.ЗаписатьСтроку(ПредставлениеДанных);
	ЗаписьДанных.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ПредставленияBase64ПриИзменении(Элемент)
	
	Если ПредставленияBase64 = 0 Тогда
		ОтобразитьПредставлениеДанных();
	ИначеЕсли ПредставленияBase64 = 1 Тогда
		ОтобразитьПредставлениеДанных();
		ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(ПредставлениеДанных);
		вBase64 = Base64Строка(ДвоичныеДанныеСтроки);		
		ПредставлениеДанных = СтрЗаменить(СтрЗаменить(вBase64, Символ(10), ""), Символ(13), "");
	
	ИначеЕсли ПредставленияBase64 = 2 Тогда
		ОтобразитьПредставлениеДанных();
		Попытка
			ДвоичныеДанныеСтроки = Base64Значение(ПредставлениеДанных);
			ПредставлениеДанных = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеСтроки);			
		Исключение
			ПредставленияBase64 = Ложь;
		КонецПопытки;
	Иначе
		ОтобразитьПредставлениеДанных();
	КонецЕсли;
	
	Элементы.ПредставлениеДанных.ТолькоПросмотр = ПредставленияBase64 = 1;

КонецПроцедуры

&НаСервере
Процедура ОпределитьСтрокуТекущегоСообщенияВСпискеСвязанных()
	
	ТекущееСообщение = Объект.Ссылка;
	Если Не ЗначениеЗаполнено(ТекущееСообщение) Тогда
		Возврат;
	КонецЕсли;	
	
	СписокСвязьСДругимиСообщениями = Элементы.СвязьСДругимиСообщениями;
	
	Схема = СписокСвязьСДругимиСообщениями.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = СписокСвязьСДругимиСообщениями.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();	
	
	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ТекущееСообщение; 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , 
						Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.НачатьВывод();	
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки); 
	
	СтрокаТаблицыСписка = Результат.Найти(ТекущееСообщение, "Ссылка");
	Если СтрокаТаблицыСписка <> Неопределено Тогда
		СписокСвязьСДругимиСообщениями.ТекущаяСтрока = СтрокаТаблицыСписка.Ссылка;		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти