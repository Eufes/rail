
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура добавляет запись в регистр по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи	 - Структура:
//     * ВнешняяСистема - ПланОбменаСсылка - узел плана обмена.
//     * Объект - ЛюбаяСсылка - ссылка на объект. 
//  Загрузка - Булево - Признак ОбменДанными.Загрузка 
//
Процедура ДобавитьЗапись(СтруктураЗаписи, Загрузка = Ложь) Экспорт
	
	Если Не СтруктураЗаписи.Свойство("ДатаСоздания") Тогда
		СтруктураЗаписи.Вставить("ДатаСоздания", ТекущаяДатаСеанса());
	КонецЕсли;
		
	EUF_ПроводникОбщегоНазначения.ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи,
								"EUF_ПроводникИдентификаторыВнешнихСистем", Загрузка);
	
КонецПроцедуры

// Возвращает признак наличия записи в регистре по переданному отбору.
//
// Параметры:
//   СтруктураЗаписи - Структура:
//     * ВнешняяСистема - ПланОбменаСсылка - узел плана обмена.
//     * Объект - ЛюбаяСсылка - ссылка на объект.
//
// Возвращаемое значение:
//   Булево - Истина, если в регистре содержатся записи для заданного отбора.
//
Функция ЗаписьЕстьВРегистре(СтруктураЗаписи) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗапись
	|ИЗ
	|	РегистрСведений.EUF_ПроводникИдентификаторыВнешнихСистем КАК ИДВнешнихСистем
	|ГДЕ
	|	ИДВнешнихСистем.ВнешняяСистема = &ВнешняяСистема
	|	И ИДВнешнихСистем.Объект = &Объект");
	Запрос.УстановитьПараметр("ВнешняяСистема", СтруктураЗаписи.ВнешняяСистема);
	Запрос.УстановитьПараметр("Объект",         СтруктураЗаписи.Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Процедура удаляет набор записей в регистре по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи	 - Структура:
//     * ВнешняяСистема - ПланОбменаСсылка - узел плана обмена.
//     * Объект - ЛюбаяСсылка - ссылка на объект.
//  Загрузка - Булево - Признак ОбменДанными.Загрузка
//
Процедура УдалитьЗапись(СтруктураЗаписи, Загрузка = Ложь) Экспорт
	
	EUF_ПроводникОбщегоНазначения.УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи,
								"EUF_ПроводникИдентификаторыВнешнихСистем", Загрузка);
	
КонецПроцедуры

// Преобразует ссылку на объект текущей информационной базы в строковое представление УИД.
// Если в регистре есть такая ссылка, возвращается УИД из регистра.
// В противном случае возвращается УИД переданной ссылки.
// 
// Параметры:
//  ВнешняяСистема - ПланОбменаСсылка.EUF_ПроводникВнешниеСистемы - ссылка на узел плана обмена,
//														в который происходит выгрузка данных.
//  СсылкаНаОбъект - ЛюбаяСсылка - ссылка на объект информационной базы, для которого необходимо получить
//                   уникальный идентификатор объекта XDTO.
//
// Возвращаемое значение:
//  Строка - уникальный идентификатор объекта.
//
Функция ИдентификаторПоСсылкеОбъекта(ВнешняяСистема, СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определение публичной ссылки через ссылку на объект.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИДВнешнихСистем.ИдентификаторОбъекта КАК Идентификатор
	|ИЗ
	|	РегистрСведений.EUF_ПроводникИдентификаторыВнешнихСистем КАК ИДВнешнихСистем
	|ГДЕ
	|	ИДВнешнихСистем.ВнешняяСистема = &ВнешняяСистема
	|	И ИДВнешнихСистем.Объект = &Объект");
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	Запрос.УстановитьПараметр("Объект",         СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат СокрЛП(Выборка.Идентификатор);
	ИначеЕсли Выборка.Количество() > 1 Тогда
		СтруктураЗаписи = Новый Структура();
		СтруктураЗаписи.Вставить("ВнешняяСистема", ВнешняяСистема);
		СтруктураЗаписи.Вставить("Ссылка",         СсылкаНаОбъект);
		УдалитьЗапись(СтруктураЗаписи, Истина);
	КонецЕсли;
	
	Возврат СокрЛП(СсылкаНаОбъект.УникальныйИдентификатор());

КонецФункции

#КонецОбласти

#КонецЕсли