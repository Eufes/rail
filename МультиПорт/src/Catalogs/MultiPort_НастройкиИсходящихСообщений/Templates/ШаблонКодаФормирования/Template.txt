
// Структура НастройкиПоТипуСообщения содержит настройки по типу сообщения

// "НастройкаСсылка" - Ссылка
// "ТипИсходящегоСообщения"
// "СинхронныйРежим" - булево
// "СпособФормирования" - Перечисление

// В исполняемом коде подготовленные данные должны быть помещены в элемент структуры "СтруктураРезультат.ДанныеВФорматеОбмена"  

СтруктураРезультат = Новый Структура("ДанныеВФорматеТранспорта", "");
СтруктураРезультат.Вставить("ОписаниеФормата", "json");

СтруктураКвитанции = Новый Структура;

СтруктураКвитанции.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
СтруктураКвитанции.Вставить("ТипСообщения", "kvitantsiya_do_o_prieme_elektronnykh_dokumentov");

МассивИнформацииПоОбработкеДокументов = Новый Массив;
СтруктураПоДокументу = Новый Структура;
СтруктураПоДокументу.Вставить("МетаИмяДокумента", "РеализацияТоваровУслуг");
СтруктураПоДокументу.Вставить("Организация", "2");
СтруктураПоДокументу.Вставить("GUIDДокумента", "a12a87a8-14b4-11ec-8186-005056b14eb6");
СтруктураПоДокументу.Вставить("ИмяСостояния", "УспешноПринятИОбработанВДО");
СтруктураПоДокументу.Вставить("СистемнаяИнформация", "При обработке возникли ошибки установки связи со счет-фактурой связанной");

МассивИнформацииПоОбработкеДокументов.Добавить(СтруктураПоДокументу);

СтруктураКвитанции.Вставить("МассивИнформацииПоОбработкеДокументов", МассивИнформацииПоОбработкеДокументов);


ЗаписьJSON = Новый ЗаписьJSON;
ЗаписьJSON.УстановитьСтроку();
НастройкиСериализации = Новый НастройкиСериализацииJSON();
НастройкиСериализации.СериализовыватьМассивыКакОбъекты = Ложь;
НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
ЗаписатьJSON(ЗаписьJSON, СтруктураКвитанции, НастройкиСериализации);
ДанныеВФорматеТранспорта =  ЗаписьJSON.Закрыть();

СтруктураРезультат.Вставить("ДанныеВФорматеТранспорта", ДанныеВФорматеТранспорта);

