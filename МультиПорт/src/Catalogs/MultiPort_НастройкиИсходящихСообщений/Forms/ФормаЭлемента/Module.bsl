
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	СпособФормированияСообщенийПриИзмененииНаСервере();
	ВариантПроизвольногоОбработчикаПриИзмененииНаСервере();
	ВариантОбработчикаПриОтправкеПриИзмененииНаСервере(); 
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СинхронныйРежимПриИзменении(Элемент)
	
	Если Объект.ИспользоватьОбработчикПослеОтправки Тогда
		ТекстВопроса = "Установлен признак """ + Элементы.ИспользоватьОбработчикПослеОтправки.Заголовок + """
		|он будет снят, т.к. он доступен только при асинхронном режиме. Продолжить?";
		Таймаут = 60;
		ОписаниеОповещения = Новый ОписаниеОповещения("СинхронныйРежимПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, Таймаут);
	Иначе
		СинхронныйРежимПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронныйРежимПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		Объект.СинхронныйРежим = Ложь;
		Возврат;
	КонецЕсли;
	
	СинхронныйРежимПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура СинхронныйРежимПриИзмененииНаСервере()
	
	Если Объект.СинхронныйРежим Тогда
		Объект.ИспользоватьОбработчикПослеОтправки = Ложь;
	Иначе
		Объект.ВозвращатьОтветВИнтерфейс = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры 

&НаКлиенте
Процедура ИспользоватьОбработчикПослеОтправкиПриИзменении(Элемент)
	ИспользоватьОбработчикПослеОтправкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИспользоватьОбработчикПослеОтправкиПриИзмененииНаСервере()
	
	Если Объект.ИспользоватьОбработчикПослеОтправки Тогда
		Объект.ОбрабатыватьРезультатЗапроса = Ложь;
	КонецЕсли;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбрабатыватьРезультатЗапросаПриИзменении(Элемент)
	ОбрабатыватьРезультатЗапросаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбрабатыватьРезультатЗапросаПриИзмененииНаСервере()
	
	Если Объект.ОбрабатыватьРезультатЗапроса Тогда
		Объект.ИспользоватьОбработчикПослеОтправки = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	ДоступностьПослеОтправки = Не Объект.СинхронныйРежим И Не Объект.ОбрабатыватьРезультатЗапроса;
	Элементы.ГруппаПослеОтправкиДанных.Доступность = ДоступностьПослеОтправки;
	
	ДоступностьОбрабатыватьРезультат = Не Объект.ИспользоватьОбработчикПослеОтправки
										И Не Объект.ВозвращатьОтветВИнтерфейс;
	Элементы.ГруппаОбработкаОтвета.Доступность = ДоступностьОбрабатыватьРезультат;  
	
	Элементы.ВозвращатьОтветВИнтерфейс.Доступность = Объект.СинхронныйРежим;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКодФормированияИзШаблона(Команда)
		
	Объект.КодФормированияСообщения = ПолучитьТекстШаблонаКода();
	
КонецПроцедуры
		
&НаСервере
Функция ПолучитьТекстШаблонаКода()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекстШаблона = ТекущийОбъект.ПолучитьМакет("ШаблонКодаФормирования");
	
	Возврат ТекстШаблона.ПолучитьТекст();
	
КонецФункции	

&НаКлиенте
Процедура КодФормированияСообщенияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособФормированияСообщенийПриИзменении(Элемент)
	СпособФормированияСообщенийПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СпособФормированияСообщенийПриИзмененииНаСервере()
	
	СпособФормированияСообщений = Объект.СпособФормированияСообщений;
	МассивСтраницСпособов = Новый Массив;
	МассивСтраницСпособов.Добавить("КонструкторСообщения");
	МассивСтраницСпособов.Добавить("ПроизвольныйАлгоритм");
	МассивСтраницСпособов.Добавить("ПравилоКонвертации");
	
	Для Каждого ИмяСтраницы Из МассивСтраницСпособов Цикл
		ВидимостьСтраницы = СпособФормированияСообщений = Перечисления.MultiPort_СпособыПреобразованияСообщений[ИмяСтраницы];
		Элементы["Страница" + ИмяСтраницы].Видимость = ВидимостьСтраницы;		
	КонецЦикла;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ВариантПроизвольногоОбработчикаПриИзменении(Элемент)	
	ВариантПроизвольногоОбработчикаПриИзмененииНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ВариантПроизвольногоОбработчикаПриИзмененииНаСервере()
	
	ВариантПроизвольногоОбработчика = Объект.ВариантПроизвольногоОбработчика;
	
	Элементы.ИмяВстроенногоОбработчика.Видимость = Ложь;
	Элементы.ОбработкаФормированияИсходящего.Видимость = Ложь;
	Элементы.ГруппаКодФормирования.Видимость = Ложь;
	Элементы.ИнфоВариантОбработчикаИной.Видимость = Ложь;
	
	Если ВариантПроизвольногоОбработчика = 
		Перечисления.MultiPort_ВариантыПроизвольногоОбработчика.ВстроенныйОбработчик Тогда
		Элементы.ИмяВстроенногоОбработчика.Видимость = Истина;
	ИначеЕсли ВариантПроизвольногоОбработчика = 
		Перечисления.MultiPort_ВариантыПроизвольногоОбработчика.ПодключаемыйОбработчик Тогда
		Элементы.ОбработкаФормированияИсходящего.Видимость = Истина;
	ИначеЕсли ВариантПроизвольногоОбработчика = 
		Перечисления.MultiPort_ВариантыПроизвольногоОбработчика.ПроизвольныйКод Тогда
		Элементы.ГруппаКодФормирования.Видимость = Истина;
	ИначеЕсли ВариантПроизвольногоОбработчика = 
		Перечисления.MultiPort_ВариантыПроизвольногоОбработчика.ОпределяетсяВнеПодсистемы Тогда
		Элементы.ИнфоВариантОбработчикаИной.Видимость = Истина; 		
	Иначе
		Элементы.ИнфоВариантОбработчикаИной.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработчикаПриОтправкеПриИзменении(Элемент)
	ВариантОбработчикаПриОтправкеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВариантОбработчикаПриОтправкеПриИзмененииНаСервере()
	
	ВариантОбработчикаПриОтправке = Объект.ВариантОбработчикаПриОтправке;
	
	Элементы.ИмяВстроенногоОбработчикаПриОтправке.Видимость = Ложь;
	Элементы.ОбработкаПриОтправке.Видимость = Ложь;
	Элементы.ИнфоВариантОбработчикаПриОтправкеИной.Видимость = Ложь;
	Элементы.ИнфоПередОтправкой.Видимость = Истина;
	
	Если ВариантОбработчикаПриОтправке = 
		Перечисления.MultiPort_ВариантыПроизвольногоОбработчика.ВстроенныйОбработчик Тогда
		Элементы.ИмяВстроенногоОбработчикаПриОтправке.Видимость = Истина;
	ИначеЕсли ВариантОбработчикаПриОтправке = 
		Перечисления.MultiPort_ВариантыПроизвольногоОбработчика.ПодключаемыйОбработчик Тогда
		Элементы.ОбработкаПриОтправке.Видимость = Истина; 
	ИначеЕсли ВариантОбработчикаПриОтправке = 
		Перечисления.MultiPort_ВариантыПроизвольногоОбработчика.ОпределяетсяВнеПодсистемы Тогда
		Элементы.ИнфоВариантОбработчикаПриОтправкеИной.Видимость = Истина; 
		Элементы.ИнфоПередОтправкой.Видимость = Ложь;
	Иначе
		Элементы.ИнфоВариантОбработчикаПриОтправкеИной.Видимость = Истина;
		Элементы.ИнфоПередОтправкой.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработчикаПриОтправкеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(
		ПредопределенноеЗначение("Перечисление.MultiPort_ВариантыПроизвольногоОбработчика.ВстроенныйОбработчик"),
		"Встроенный обработчик"); 
	СписокЗначений.Добавить(
		ПредопределенноеЗначение("Перечисление.MultiPort_ВариантыПроизвольногоОбработчика.ПодключаемыйОбработчик"),
		"Подключаемый обработчик"); 
	
	ДанныеВыбора = СписокЗначений;

КонецПроцедуры

&НаСервере
Процедура ВозвращатьОтветВИнтерфейсПриИзмененииНаСервере()
	
	Если Объект.ВозвращатьОтветВИнтерфейс Тогда
		Объект.ОбрабатыватьРезультатЗапроса = Ложь;
	КонецЕсли;                       
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращатьОтветВИнтерфейсПриИзменении(Элемент)
	ВозвращатьОтветВИнтерфейсПриИзмененииНаСервере();
КонецПроцедуры
   
#КонецОбласти

