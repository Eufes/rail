

#Область СлужебныеПроцедурыИФункции

// Получает параметры подключения
//
// Параметры:
//  ОбъектИнициатор		 - ПланОбменаСсылка.MultiPort_ВнешниеСистемы
//						 - СправочникСсылка.MultiPort_ПодключенияКВнешнимСистемам
//						 	Объект, оносительно которого определяются настройки
//  ИнтерфейсТранспорта	 - ПеречислениеСсылка.MultiPort_ИнтерфейсыТранспорта
//  
//	Возвращаемое значение:
//  Структура - необходимые параметры для подключения:
//   * ПсевдоПодключение - Булево 
//   * ПараметрыПодключенияСсылка - СправочникСсылка.MultiPort_ПодключенияКВнешнимСистемам, Неопределено - 
//   						Ссылка на справочник в котором храняться параметры.
//	 * ИнтерфейсТранспорта - ПеречислениеСсылка.MultiPort_ИнтерфейсыТранспорта, Неопределено, Произвольный -
//	 							Неопределенный тип в случае ошибок. 
//	 Остальные поля в соответствие с интерфейсом транспорта (см. код)
//
Функция ПолучитьПараметрыПодключения(ОбъектИнициатор, ИнтерфейсТранспорта = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;	
	СтруктураПараметров.Вставить("ПсевдоПодключение", Ложь);
	СтруктураПараметров.Вставить("ПараметрыПодключенияСсылка", Неопределено);
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Ссылка", ОбъектИнициатор);
			
	Если ТипЗнч(ОбъектИнициатор) = Тип("ПланОбменаСсылка.MultiPort_ВнешниеСистемы") Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВнешниеСистемы.ПараметрыПодключения КАК ПараметрыПодключенияСсылка
		|ПОМЕСТИТЬ ВТ_ПараметрыПодключения
		|ИЗ
		|	ПланОбмена.MultiPort_ВнешниеСистемы КАК ВнешниеСистемы
		|ГДЕ
		|	ВнешниеСистемы.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(ОбъектИнициатор) = Тип("СправочникСсылка.MultiPort_ПодключенияКВнешнимСистемам") Тогда		
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПараметрыПодключения.Ссылка КАК ПараметрыПодключенияСсылка
		|ПОМЕСТИТЬ ВТ_ПараметрыПодключения
		|ИЗ
		|	Справочник.MultiPort_ПодключенияКВнешнимСистемам КАК ПараметрыПодключения
		|ГДЕ
		|	ПараметрыПодключения.Ссылка = &Ссылка";
		
	Иначе
		ПредставлениеИнициатора = Строка(ОбъектИнициатор);
		ТекстИсключения = СтрШаблон("Некорректный объект инициатор для получения параметров  подключения! "
									+ "Внешняя система: %1.",
									ПредставлениеИнициатора);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли; 	 
	
	ТекстЗапроса = ТекстЗапроса + " ; " +
	"ВЫБРАТЬ
	|	ПП.ПараметрыПодключенияСсылка КАК ПараметрыПодключенияСсылка,
	|	ПП.ПараметрыПодключенияСсылка.ИнтерфейсТранспортаПоУмолчанию КАК ИнтерфейсТранспорта,
	|	ПП.ПараметрыПодключенияСсылка.ПсевдоПодключение КАК ПсевдоПодключение,
	|	ПП.ПараметрыПодключенияСсылка.WSИмяСервиса КАК WSИмяСервиса,
	|	ПП.ПараметрыПодключенияСсылка.WSИмяТочкиПодключения КАК WSИмяТочкиПодключения,
	|	ПП.ПараметрыПодключенияСсылка.WSСсылкаWSDL КАК WSСсылкаWSDL,
	|	ПП.ПараметрыПодключенияСсылка.WSURIПространстваИменСервиса КАК WSURIПространстваИменСервиса,
	|	ПП.ПараметрыПодключенияСсылка.WSПользовательПрокси КАК WSПользовательПрокси,
	|	ПП.ПараметрыПодключенияСсылка.WSПользовательОпределения КАК WSПользовательОпределения,
	|	ПП.ПараметрыПодключенияСсылка.WSАутентификацияОС КАК WSАутентификацияОС,
	|	ПП.ПараметрыПодключенияСсылка.WSАутентификацияОСОпределения КАК WSАутентификацияОСОпределения,
	|	ПП.ПараметрыПодключенияСсылка.WSТаймаут КАК WSТаймаут,
	|	ПП.ПараметрыПодключенияСсылка.HTTPАдресСервиса КАК HTTPАдресСервиса,
	|	ПП.ПараметрыПодключенияСсылка.HTTPПользователь КАК HTTPПользователь,
	|	ПП.ПараметрыПодключенияСсылка.HTTPРесурсНаСервере КАК HTTPРесурсНаСервере,
	|	ПП.ПараметрыПодключенияСсылка.HTTPЗащищенноеСоединение КАК HTTPЗащищенноеСоединение,
	|	ПП.ПараметрыПодключенияСсылка.HTTPТаймаут КАК HTTPТаймаут,
	|	ПП.ПараметрыПодключенияСсылка.HTTPАутентификацияОС КАК HTTPАутентификацияОС,
	|	ПП.ПараметрыПодключенияСсылка.HTTPПорт КАК HTTPПорт,
	|	ПП.ПараметрыПодключенияСсылка.COMФайловаяБазаКорреспондент КАК COMФайловаяБазаКорреспондент,
	|	ПП.ПараметрыПодключенияСсылка.COMИмяПользователя КАК COMИмяПользователя,
	|	ПП.ПараметрыПодключенияСсылка.COMИмяСервера1СПредприятия КАК COMИмяСервера1СПредприятия,
	|	ПП.ПараметрыПодключенияСсылка.COMИмяБазыНаСервере1СПредприятия КАК COMИмяБазыНаСервере1СПредприятия,
	|	ПП.ПараметрыПодключенияСсылка.COMКаталогИнформационнойБазы КАК COMКаталогИнформационнойБазы,
	|	ПП.ПараметрыПодключенияСсылка.COMАутентификацияОперационнойСистемы КАК COMАутентификацияОперационнойСистемы,
	|	ПП.ПараметрыПодключенияСсылка.ExtSysСтрокаПодключения КАК ExtSysСтрокаПодключения,
	|	ПП.ПараметрыПодключенияСсылка.ExtSysИмяПользователя КАК ExtSysИмяПользователя,
	|	ПП.ПараметрыПодключенияСсылка.ExtSysТаймаут КАК ExtSysТаймаут,
	|	ПП.ПараметрыПодключенияСсылка.ExtSysИмяПриложенияCOM КАК ExtSysИмяПриложенияCOM
	|ИЗ
	|	ВТ_ПараметрыПодключения КАК ПП"; 		
	
	Запрос.Текст = ТекстЗапроса;			
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		ПредставлениеИнициатора = Строка(ОбъектИнициатор);
		ТекстИсключения = СтрШаблон("Не удалось определить параметры подключения "
										+ "Внешняя система: %1. ",
										ПредставлениеИнициатора);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
		
	Если ИнтерфейсТранспорта = Неопределено Тогда
		ИнтерфейсТранспорта = Выборка.ИнтерфейсТранспорта;
	КонецЕсли;		
	
	Если ИнтерфейсТранспорта = Перечисления.MultiPort_ИнтерфейсыТранспорта.WebService Тогда
		
		ПаролиДляПолучения = "WSПароль,WSПарольОпределения";
		
		СтруктураПараметров.Вставить("WSСсылкаWSDL", "");
		СтруктураПараметров.Вставить("WSПользовательОпределения", "");
		СтруктураПараметров.Вставить("WSПарольОпределения", "");
		СтруктураПараметров.Вставить("WSАутентификацияОСОпределения", Ложь);
		СтруктураПараметров.Вставить("WSURIПространстваИменСервиса", "");
		СтруктураПараметров.Вставить("WSИмяСервиса", "");
		СтруктураПараметров.Вставить("WSИмяТочкиПодключения", "");
		СтруктураПараметров.Вставить("WSПользовательПрокси", "");
		СтруктураПараметров.Вставить("WSПароль", "");
		СтруктураПараметров.Вставить("WSАутентификацияОС", Ложь);
		СтруктураПараметров.Вставить("WSТаймаут", 0);
		
	ИначеЕсли ИнтерфейсТранспорта = Перечисления.MultiPort_ИнтерфейсыТранспорта.HttpService Тогда
		
		ПаролиДляПолучения = "HTTPПароль";
		
		СтруктураПараметров.Вставить("HTTPАдресСервиса", "");
		СтруктураПараметров.Вставить("HTTPПользователь", "");
		СтруктураПараметров.Вставить("HTTPРесурсНаСервере", "");
		СтруктураПараметров.Вставить("HTTPЗащищенноеСоединение", Ложь);
		СтруктураПараметров.Вставить("HTTPПароль", "");
		СтруктураПараметров.Вставить("HTTPТаймаут", 0);
		СтруктураПараметров.Вставить("HTTPАутентификацияОС", Ложь);
		ТипПорт = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный));
		СтруктураПараметров.Вставить("HTTPПорт", ТипПорт.ПривестиЗначение());
		
	ИначеЕсли ИнтерфейсТранспорта = Перечисления.MultiPort_ИнтерфейсыТранспорта.COM Тогда
		
		ПаролиДляПолучения = "COMПароль";
		СтруктураПараметров.Вставить("COMФайловаяБазаКорреспондент", Ложь);
		СтруктураПараметров.Вставить("COMИмяПользователя", "");
		СтруктураПараметров.Вставить("COMПароль", "");
		СтруктураПараметров.Вставить("COMАутентификацияОперационнойСистемы", Ложь);
		СтруктураПараметров.Вставить("COMИмяСервера1СПредприятия", "");
		СтруктураПараметров.Вставить("COMИмяБазыНаСервере1СПредприятия", "");
		СтруктураПараметров.Вставить("COMКаталогИнформационнойБазы", "");
		
	ИначеЕсли ИнтерфейсТранспорта = Перечисления.MultiPort_ИнтерфейсыТранспорта.ExternalSystem Тогда
		
		ПаролиДляПолучения = "ExtSysПароль";
		СтруктураПараметров.Вставить("ExtSysСтрокаПодключения", "");
		СтруктураПараметров.Вставить("ExtSysТаймаут", 0);
		СтруктураПараметров.Вставить("ExtSysИмяПользователя", "");
		СтруктураПараметров.Вставить("ExtSysПароль", "");
		СтруктураПараметров.Вставить("ExtSysИмяПриложенияCOM", "");
		
	Иначе	
		ПредставлениеИнициатора = Строка(ОбъектИнициатор);					
		ТекстИсключения = СтрШаблон("Не удалось определить параметры подключения - не указан интерфейс транспорта "
									+ "Внешняя система: %1. ",
									ПредставлениеИнициатора);
		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
	СтруктураПараметров.Вставить("ИнтерфейсТранспорта", ИнтерфейсТранспорта);		
	
	УстановитьПривилегированныйРежим(Истина);
	Пароли = MultiPort_ШлюзБСПСервер.ПрочитатьДанныеИзБезопасногоХранилища(Выборка.ПараметрыПодключенияСсылка,
																				ПаролиДляПолучения);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОдинПароль = ?(ТипЗнч(Пароли) = Тип("Структура"), Ложь, Истина);
	
	МассивПаролей = СтрРазделить(ПаролиДляПолучения, ",", Ложь);
	Для Каждого ПарольПараметров Из МассивПаролей Цикл
		Если ОдинПароль Тогда
			СтруктураПараметров[ПарольПараметров] = Пароли;
			Прервать;
		Иначе
			СтруктураПараметров[ПарольПараметров] = Пароли[ПарольПараметров];
		КонецЕсли;
	КонецЦикла;
		
	Возврат СтруктураПараметров;
	
КонецФункции 	

// Возвращает адресатов касательно конкретного интеграционного процесса.
//  Используется для уведомлений заинтересованных лиц конкретного процесса.
//
// Параметры:
//  Процесс		 	- СправочникСсылка.MultiPort_ИнтеграционныеПроцессы	 - Интеграционный процесс
//  Назначение	 	- Строка - Параметр для получения определенных адресатов
//  ГруппаАдресатов	- Строка - Дополнительный разрез в рамках одного интеграционного процесса.
//								Возможно указание нескольких через запятую.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица адресатов с представлением адресов
//
Функция ПолучитьАдресатовИнтеграционногоПроцесса(Процесс, Назначение = "ДляУведомленийОбОшибках", ГруппаАдресатов = "") Экспорт
	
	Адресаты = Новый ТаблицаЗначений;
	Адресаты.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	Адресаты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнтеграционныеПроцессыАдресаты.Адресат КАК Адресат,
	|	ТИПЗНАЧЕНИЯ(ИнтеграционныеПроцессыАдресаты.Адресат) КАК ТипАдресата,
	|	ИнтеграционныеПроцессыАдресаты.Адресат КАК ДляОпределенияТипаАдресатаВнеЗапроса
	|ИЗ
	|	Справочник.MultiPort_ИнтеграционныеПроцессы.Адресаты КАК ИнтеграционныеПроцессыАдресаты
	|ГДЕ
	|	ИнтеграционныеПроцессыАдресаты.Ссылка = &Процесс
	|	И ВЫБОР
	|			КОГДА &Назначение = ""ДляШтатныхУведомлений""
	|				ТОГДА ИнтеграционныеПроцессыАдресаты.ДляШтатныхУведомлений = ИСТИНА
	|			ИНАЧЕ ИнтеграционныеПроцессыАдресаты.ДляУведомленийОбОшибках = ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ПоГруппам = ИСТИНА
	|				ТОГДА ИнтеграционныеПроцессыАдресаты.ИдентификаторГруппы В (&МассивГрупп)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|ИТОГИ
	|	МАКСИМУМ(ДляОпределенияТипаАдресатаВнеЗапроса)
	|ПО
	|	ТипАдресата";
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	
	МассивГрупп	= Новый Массив;
	Если ЗначениеЗаполнено(ГруппаАдресатов) Тогда
		МассивГрупп = СтрРазделить(ГруппаАдресатов, ",", Ложь);
		Запрос.УстановитьПараметр("ПоГруппам", Истина);		
	Иначе
		Запрос.УстановитьПараметр("ПоГруппам", Ложь);
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивГрупп", МассивГрупп);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Адресаты;
	КонецЕсли;
	
	ИмяСправочникаВидовКИ = "ВидыКонтактнойИнформации";
	МенеджерВидыКонтактнойИнформации = Справочники[ИмяСправочникаВидовКИ];
	ВозможныеСоответствияИменамПредопределенным = Новый Структура;
	ВозможныеСоответствияИменамПредопределенным.Вставить("EmailКонтактныеЛица", Тип("СправочникСсылка.КонтактныеЛица"));
	ВозможныеСоответствияИменамПредопределенным.Вставить("EmailПользователя", Тип("СправочникСсылка.Пользователи"));
	// Для старых БСП
	ВозможныеСоответствияИменамПредопределенным.Вставить("EmailКонтактногоЛица", Тип("СправочникСсылка.КонтактныеЛица")); 
	
	МассивИменПредопределенных = Метаданные.Справочники[ИмяСправочникаВидовКИ].ПолучитьИменаПредопределенных();
	СоответствиеТиповАдресатовВидамКИ = Новый Соответствие; 
	Для Каждого КлючИЗначение Из ВозможныеСоответствияИменамПредопределенным Цикл
		ИмяВозможноЭлемента = КлючИЗначение.Ключ;
		Если МассивИменПредопределенных.Найти(ИмяВозможноЭлемента) <> Неопределено Тогда
			
			СоответствиеТиповАдресатовВидамКИ.Вставить(КлючИЗначение.Значение, 
								МенеджерВидыКонтактнойИнформации[ИмяВозможноЭлемента]);
		КонецЕсли;	
	КонецЦикла; 
								
	ТипКИ = Перечисления["ТипыКонтактнойИнформации"].АдресЭлектроннойПочты;							
								
	ВыборкаПоТипамАдресатов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	Пока ВыборкаПоТипамАдресатов.Следующий() Цикл
		
		ВидКИ = СоответствиеТиповАдресатовВидамКИ.Получить(ТипЗнч(ВыборкаПоТипамАдресатов.ДляОпределенияТипаАдресатаВнеЗапроса));
		Получатели = Новый Массив;
		ВыборкаДетальная = ВыборкаПоТипамАдресатов.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл 		
			Получатели.Добавить(ВыборкаДетальная.Адресат);			
		КонецЦикла;	
		
		// Используются в составе БСП		
		ПочтовыеАдреса = MultiPort_ШлюзБСПСервер.КонтактнаяИнформацияОбъектов(Получатели, ТипКИ, ВидКИ);
		
		Для Каждого ЭлементКИ Из ПочтовыеАдреса Цикл		
			НовСтрока = Адресаты.Добавить();
			НовСтрока.Адрес = ЭлементКИ.Представление;
			НовСтрока.Представление = Строка(ЭлементКИ.Объект);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Адресаты;
	
КонецФункции

#Область РаботаСИсходящимиСообщениями //*******************************************

// Возвращает реквизиты по справочнику настроек сообщений
//
// Параметры:
//  НастройкаСсылка			 - СправочникСсылка.MultiPort_НастройкиИсходящихСообщений,
//								СправочникСсылка.MultiPort_НастройкиВходящихСообщений - Ссылка на справочник настроек
//  СтрРеквизитыОбработчика	 - Строка - Реквизиты справочника строкой 
// 
// Возвращаемое значение:
//  Структура - значения реквизитов, перечисленных в параметре СтрРеквизитыОбработчика
//
Функция РеквизитыНастроекСообщений(НастройкаСсылка, СтрРеквизитыОбработчика) Экспорт
	
	РеквизитыОбработчика = MultiPort_ШлюзБСПСервер.ЗначенияРеквизитовОбъекта(НастройкаСсылка, СтрРеквизитыОбработчика);
	Возврат РеквизитыОбработчика;
	
КонецФункции	

#КонецОбласти // РаботаСИсходящимиСообщениями

#Область РаботаСВходящимиСообщениями //*******************************************

// Функция определяет тип входящего сообщения по мнемокоду
//
// Параметры:
//  МнемокодСообщения	 - Строка	 - Техническое имя типа сообщения
// 
// Возвращаемое значение:
//  СправочникСсылка.MultiPort_ТипВходящегоСообщения, Неопределено - Тип входящего собщения если найден
//
Функция ОпределитьТипВходящегоСообщения(МнемокодСообщения) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	MultiPort_ТипВходящегоСообщения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.MultiPort_ТипВходящегоСообщения КАК MultiPort_ТипВходящегоСообщения
	|ГДЕ
	|	MultiPort_ТипВходящегоСообщения.ТехническоеИмя = &ТехническоеИмя";
	Запрос.УстановитьПараметр("ТехническоеИмя", МнемокодСообщения);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат Неопределено;		
	КонецЕсли;
	
КонецФункции

#КонецОбласти // РаботаСВходящимиСообщениями   

// Возвращает текущего пользователя
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - пользователь. 
//
Функция ТекущийПользователь() Экспорт
	
	Возврат MultiPort_ШлюзБСПСервер.ТекущийПользователь();
	
КонецФункции	

#КонецОбласти
