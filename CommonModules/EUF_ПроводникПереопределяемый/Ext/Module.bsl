
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Software Authors Name = "Mikhaylov Roman Vadimovich"
// Copyright (c) 2022, Mikhaylov Roman Vadimovich
// Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
// https://creativecommons.org/licenses/by-nc-sa/4.0/
///////////////////////////////////////////////////////////////////////////////////////////////////////

// Общая процедура обработки объекта по подписке
//
// Параметры:
//  ПараметрыСообщения		 - Структура - см. EUF_ПроводникОбмен.ИнициализироватьПараметрыСозданияИсходящих()
//  ТипИсходящегоСообщения	 - СправочникСсылка.EUF_ПроводникТипИсходящегоСообщения - ссылка на тип исходящего сообщения
//  Источник				 - ДокументОбъект, СправочникОбъект - объект подписки
//  Отказ					 - Булево - стандартный признак отказа транзакции обработчика подписки
//  СобытиеПоПодписке		 - Строка - описание события в регистре сведений настроек подписки "EUF_ПроводникПодпискиОбмена"
//  ПараметрыПоОбъекту		 - Структура - содержит параметры подписки на событие в соответствие с типом объекта.
//			* РежимЗаписи		- РежимЗаписиДокумента	 - Только для документов. Позволяет определить выполняется запись, проведение или отмена проведения.
//                                   Изменение значения параметра позволяет изменить режим записи.
//  		* РежимПроведения	- РежимПроведенияДокумента - Только для документов. Позволяет определить, выполняется оперативное проведение или нет.
//                                   Изменение значения параметра позволяет изменить режим проведения.
//          * Замещение			- Признак замещения записи (для регистра свденеий).
//
Процедура ВыполнитьОбработкуПодписки(ПараметрыСообщения, ТипИсходящегоСообщения,
					Источник, Отказ, СобытиеПоПодписке,
					ПараметрыПоОбъекту) Экспорт	
					
	ВыполнитьПодключаемыйОбработчикПодписки(ПараметрыСообщения, ТипИсходящегоСообщения, Источник, Отказ,
							СобытиеПоПодписке, ПараметрыПоОбъекту);
	
	Если ПараметрыСообщения.Свойство("НеВыполнятьОбработчикиАдаптера") Тогда
		Возврат;
	КонецЕсли;	
		
	ИсходящееСообщение = EUF_ПроводникОбмен.СоздатьИсходящееСообщение(ПараметрыСообщения, ТипИсходящегоСообщения);
	Если Не ЗначениеЗаполнено(ИсходящееСообщение) Тогда
		Возврат;	
	КонецЕсли;				
			
	// По умолчанию, события подписок записываем в очередь.  		
	EUF_ПроводникОбмен.ЗарегистрироватьВИсходящуюОчередь(ПараметрыСообщения, ТипИсходящегоСообщения);
		
	Если ПараметрыСообщения.ОбрабатыватьИсходящееСообщениеСразу Тогда 
		// Устанавливаем признак для обработки очереди в случае если установлен синхронный режим.
		ПараметрыСообщения.Вставить("ЭтоСобытиеПодписки", Истина);		
		
		// Следует учитывать, что в настройках по типу сообщения может стоять признак синхронного режима.
		// В этом случае отправка сообщения будет выполнена сразу.
		EUF_ПроводникОбмен.ПодготовитьОдноИсходящееКВыгрузке(ИсходящееСообщение, , , ПараметрыСообщения);			
	КонецЕсли;	
	
КонецПроцедуры	 

Процедура ВыполнитьПодключаемыйОбработчикПодписки(ПараметрыСообщения, ТипИсходящегоСообщения, Источник, Отказ,
							СобытиеПоПодписке, ПараметрыПоОбъекту)
	
	// До записи исходящего сообщения можем выполнить дополнительные проверки или сбор дополнительной информации,
	// а также установить свойство "НеВыполнятьОбработчикиАдаптера" в "ПараметрыСообщения", если обработка не требуется
	ОбработчикВМоментСобытия = ПараметрыСообщения.ОбработчикВМоментСобытия;
	Если ЗначениеЗаполнено(ОбработчикВМоментСобытия) Тогда
		Если ТипЗнч(ОбработчикВМоментСобытия) = Тип("Строка") Тогда
			ОбработкаОбъект = Обработки[ОбработчикВМоментСобытия].Создать();
		Иначе
			ОбработкаОбъект = EUF_ПроводникШлюзБСПСервер.ОбъектВнешнейОбработки(ОбработчикВМоментСобытия);
		КонецЕсли;
		
		ОбработкаОбъект.ВыполнитьОбработчикПодписки(ПараметрыСообщения, Источник, Отказ, ТипИсходящегоСообщения,
									СобытиеПоПодписке, ПараметрыПоОбъекту);
		
	КонецЕсли;	

КонецПроцедуры
	   