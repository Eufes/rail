
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Software Authors Name = "Mikhaylov Roman Vadimovich"
// Copyright (c) 2022, Mikhaylov Roman Vadimovich
// Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
// https://creativecommons.org/licenses/by-nc-sa/4.0/
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает соединение для транспорта во внешнюю систему
//
// Параметры:
//  ОбъектИнициатор -	ПланОбменаСсылка.EUF_ПроводникВнешниеСистемы - см. ниже
// 						СправочникСсылка.EUF_ПроводникПодключенияКВнешнимСистемам - Объект
//							оносительно которого определяются настройки.
//  ИнтерфейсТранспорта	 - ПеречислениеСсылка.EUF_ПроводникИнтерфейсыТранспорта
// 
// Возвращаемое значение:
//  Произвольный - WSПрокси, HTTPСоединение, COMСоединение или иной тип соединения
//
Функция ПолучитьСоединениеСВнешнейСистемой(ОбъектИнициатор, ИнтерфейсТранспорта = Неопределено) Экспорт
	
	СтруктураПараметров = EUF_ПроводникНаВремяВызоваПовтИсп.ПолучитьПараметрыПодключения(ОбъектИнициатор,
																			ИнтерфейсТранспорта);
	Коннектор = КоннекторКВнешейСистеме(СтруктураПараметров);
	
	Возврат Коннектор; 
	
КонецФункции

// Получает объект соединения с внешней системой
//
// Параметры:
//  СтруктураПараметров	 - Структура - необходимые параметры для подключения:
//   		* ПсевдоПодключение - Булево 
//   		* ПараметрыПодключенияСсылка - СправочникСсылка.EUF_ПроводникПодключенияКВнешнимСистемам, Неопределено - 
//   						Ссылка на справочник в котором храняться параметры.
//	 		* ИнтерфейсТранспорта - ПеречислениеСсылка.EUF_ПроводникИнтерфейсыТранспорта, Неопределено, Произвольный -
//	 							Неопределенный тип в случае ошибок. 
//	 Остальные поля в соответствие с интерфейсом транспорта 
//	 							(см. EUF_ПроводникНаВремяВызоваПовтИсп.ПолучитьПараметрыПодключения()) 
// 
// Возвращаемое значение:
//  Произвольный - WSПрокси, HTTPСоединение, COMСоединение или иной тип соединения 
//
Функция КоннекторКВнешейСистеме(СтруктураПараметров) Экспорт
	
	Коннектор = Неопределено;
	
	Если СтруктураПараметров.ПсевдоПодключение Тогда
		Коннектор = Обработки.EUF_ПроводникАдминистрирование.Создать();
		Возврат Коннектор;
	КонецЕсли;	
	
	Если СтруктураПараметров.ИнтерфейсТранспорта = Перечисления.EUF_ПроводникИнтерфейсыТранспорта.WebService Тогда
			
		Коннектор = КоннекторWS(СтруктураПараметров);		
	
	ИначеЕсли СтруктураПараметров.ИнтерфейсТранспорта = Перечисления.EUF_ПроводникИнтерфейсыТранспорта.HttpService Тогда
		
		Коннектор = КоннекторHTTP(СтруктураПараметров);
		
	ИначеЕсли СтруктураПараметров.ИнтерфейсТранспорта = Перечисления.EUF_ПроводникИнтерфейсыТранспорта.COM Тогда	
		
		Коннектор = КоннекторCOM(СтруктураПараметров);
		
	ИначеЕсли СтруктураПараметров.ИнтерфейсТранспорта = Перечисления.EUF_ПроводникИнтерфейсыТранспорта.ExternalSystem Тогда
		
		Коннектор = КоннекторExtSys(СтруктураПараметров);
		
	Иначе	
		Коннектор = Обработки.EUF_ПроводникАдминистрирование.Создать();
	КонецЕсли;
	
	Возврат Коннектор;
	
КонецФункции

// Используется для подготовки одного конкретного сообщения
//
// Параметры:
//  ИсходящееСообщение	 - СправочникСсылка.EUF_ПроводникСообщенияИсходящие
//  РежимОтладки		 - Булево - Для вывода сообщений пользователю и других условий
//  КонкретныйОбработчик - ВнешняяОбработка - Передается обработчик, обычно из формы отладки внешней обработки.
//										При указании будут использоваться его функции модуля объекта.
//  ДопПараметры - Структура - может содержать произвольные значения. Из основных:
//   				* ВнешняяСистема - ПланОбменаСсылка.EUF_ПроводникВнешниеСистемы - Разрез по внешней системе 
//
// Возвращаемое значение:
//  Произвольный - Результат обработки (ответ от внешней системы при синхронном режиме)
//
Функция ПодготовитьОдноИсходящееКВыгрузке(ИсходящееСообщение, РежимОтладки = Ложь,
			КонкретныйОбработчик = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Результат = Неопределено;
	ВнешняяСистема = Неопределено;
	Если ДопПараметры <> Неопределено Тогда 	
		ДопПараметры.Свойство("ВнешняяСистема", ВнешняяСистема);				
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ВнешняяСистема) Тогда
		Реквизиты = EUF_ПроводникШлюзБСПСервер.ЗначенияРеквизитовОбъекта(ИсходящееСообщение, "ВнешняяСистема");
		ВнешняяСистема = Реквизиты.ВнешняяСистема;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ВнешняяСистема КАК ВнешняяСистема,
	|	СообщенияИсходящие.Ссылка КАК ИсходящееСообщение,
	|	СообщенияИсходящие.УникальноеВремяСоздания КАК УникальноеВремяРегистрации,
	|	СообщенияИсходящие.ТипСообщения КАК ТипИсходящегоСообщения,
	|	ВЫБОР
	|		КОГДА ОчередьИсходящих.ИсходящееСообщение ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВОчереди
	|ПОМЕСТИТЬ ПулИсходящих
	|ИЗ
	|	Справочник.EUF_ПроводникСообщенияИсходящие КАК СообщенияИсходящие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.EUF_ПроводникОчередьИсходящих КАК ОчередьИсходящих
	|		ПО СообщенияИсходящие.Ссылка = ОчередьИсходящих.ИсходящееСообщение
	|ГДЕ
	|	СообщенияИсходящие.Ссылка = &ТекущееИсходящееСообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПулИсходящих.ТипИсходящегоСообщения КАК ТипИсходящегоСообщения
	|ПОМЕСТИТЬ ТипыСообщений
	|ИЗ
	|	ПулИсходящих КАК ПулИсходящих"
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ ТекстЗапросаИсходящихСНастройкамиОбработки();
	
	Запрос.УстановитьПараметр("РежимОтладки", РежимОтладки);
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	Запрос.УстановитьПараметр("КонкретныйТипСообщения", Неопределено);
	Запрос.УстановитьПараметр("ТекущееИсходящееСообщение", ИсходящееСообщение);
	Запрос.УстановитьПараметр("КонкретнаяНастройка", Неопределено);
				
	Запрос.Текст = ТекстЗапроса; 
	
	Результат = ОбработкаИсходящихСообщений(Запрос, КонкретныйОбработчик);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

// Функция проверки запрета работы регламентных процедур адаптера
// 
// Параметры:
//  ИДРеглЗадания	 - Строка - Идентификатор регламентного задания
//  ИмяРеглЗадания	 - Строка - Имя регламентного задания 
//
// Возвращаемое значение:
//  Булево - Разрешить подключение
//
Функция РазрешитьРаботуАдаптера(ИДРеглЗадания = "", ИмяРеглЗадания = "") Экспорт
	 		
	// Если имя текущей базы совпадает с именем базы из константы, тогда использование регламентных заданий разрешено
	// константа определяется в форме настроек системы 				
			
	ИмяТекущейБазы = EUF_ПроводникОбщегоНазначения.ПолучитьПредставлениеИнформационнойБазы();
	ИмяБазыСРазрешеннымиРегламентнымиЗаданиями = Константы.EUF_ПроводникИмяИБДляРаботыРеглЗаданий.Получить();
	
	Если ЗначениеЗаполнено(ИмяБазыСРазрешеннымиРегламентнымиЗаданиями) Тогда
		
		МассивРазрешенныхИмен = EUF_ПроводникШлюзБСПКлиентСервер.РазложитьСтрокуВМассивПодстрок(
													ИмяБазыСРазрешеннымиРегламентнымиЗаданиями, ";");
		
		Для Каждого ИмяБазыТекущееЗначение Из МассивРазрешенныхИмен Цикл 
			Если СокрЛП(НРег(ИмяТекущейБазы)) = СокрЛП(НРег(ИмяБазыТекущееЗначение)) Тогда
				Возврат Истина;	
			КонецЕсли;
		КонецЦикла;	
	Иначе		
		Возврат Ложь;
	КонецЕсли;
	
	ШаблонЛога = "Имя текущей базы (%1) не соответствует ни одному из разрешенных"
						+ " для запуска регламентных заданий (%2)!";
	ТекстЛогирования = СтрШаблон(ШаблонЛога,
					   ИмяТекущейБазы, ИмяБазыСРазрешеннымиРегламентнымиЗаданиями);
					   
	ТекстФонЗадания = СтрШаблон("Регламентное задание: ИД <%1>. Наименование <%2>", ИДРеглЗадания, ИмяРеглЗадания);				   
	ЗаписьЖурналаРегистрации("КонтрольРеглЗаданийАдаптера", УровеньЖурналаРегистрации.Предупреждение, ,
								ТекстФонЗадания, ТекстЛогирования); 			

	Возврат Ложь;	
	
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция КоннекторWS(СтруктураПараметров)
	
	WSDL						= СтруктураПараметров.WSСсылкаWSDL;		
	ПользовательОпределения 	= СтруктураПараметров.WSПользовательОпределения;
	ПарольОпределения			= СтруктураПараметров.WSПарольОпределения;
	АутентификацияОСОпределения	= СтруктураПараметров.WSАутентификацияОСОпределения;
	
	ПространствоИменСервиса 	= СтруктураПараметров.WSURIПространстваИменСервиса;
	ИмяСервиса 					= СтруктураПараметров.WSИмяСервиса;
	ИмяТочкиПодключения 		= СтруктураПараметров.WSИмяТочкиПодключения;	
	Пользователь 				= СтруктураПараметров.WSПользовательПрокси;
	Пароль						= СтруктураПараметров.WSПароль;
	АутентификацияОС 			= СтруктураПараметров.WSАутентификацияОС;
	Таймаут						= СтруктураПараметров.WSТаймаут;
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	
	Определение = Новый WSОпределения(WSDL, ПользовательОпределения, ПарольОпределения, ,
										Таймаут, , АутентификацияОСОпределения);
	
	Коннектор = Новый WSПрокси(Определение, ПространствоИменСервиса, ИмяСервиса, ИмяТочкиПодключения, ,
								Таймаут, SSL, , АутентификацияОС);							
	Коннектор.Пользователь 	= Пользователь;
	Коннектор.Пароль		= Пароль;
		
	Возврат Коннектор;
	
КонецФункции

Функция КоннекторHTTP(СтруктураПараметров)
	
	АдресСервиса		 = СтруктураПараметров.HTTPАдресСервиса;
	Пользователь		 = СтруктураПараметров.HTTPПользователь;
	Пароль 		 		 = СтруктураПараметров.HTTPПароль;
	Таймаут		 		 = СтруктураПараметров.HTTPТаймаут;
	ЗащищенноеСоединение = СтруктураПараметров.HTTPЗащищенноеСоединение;
	АутентификацияОС	 = СтруктураПараметров.HTTPАутентификацияОС; 
	
	Если ЗащищенноеСоединение Тогда
		СертификатКлиента = Новый СертификатКлиентаWindows();
		СертификатыУЦ = Новый СертификатыУдостоверяющихЦентровWindows();
		SSL	= Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, СертификатыУЦ);
		ПортПоУмолчанию = 443;
	Иначе
	 	SSL	= Неопределено;
		ПортПоУмолчанию = 80;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.HTTPПорт) Тогда
		ПортСоединения = ПортПоУмолчанию; 
	Иначе	
		ПортСоединения = СтруктураПараметров.HTTPПорт;
	КонецЕсли;	
	
	HTTPСоединение 	= Новый HTTPСоединение(АдресСервиса, ПортСоединения, Пользователь, Пароль, ,
											Таймаут, SSL, АутентификацияОС);
											
	Если СтруктураПараметров.Свойство("HTTPРесурсПроверкиСоединения") Тогда
		HTTPЗапрос = Новый HTTPЗапрос(СтруктураПараметров.HTTPРесурсПроверкиСоединения);		
    	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		КодСостояния = HTTPОтвет.КодСостояния;
				
		КодУспех = 200;
		КодПроверкиСотых = 100;
		КодСостоянияОбщий = КодСостояния - (КодСостояния % КодПроверкиСотых);		
		Если КодСостоянияОбщий <> КодУспех Тогда
			СтруктураПараметров.Вставить("КодОтвета", HTTPОтвет.КодСостояния);
			ТекстПредупреждения = СтрШаблон("Код состояния %1.", HTTPОтвет.КодСостояния);
			EUF_ПроводникШлюзБСПКлиентСервер.СообщитьПользователю(ТекстПредупреждения);	 		
		КонецЕсли;
	КонецЕсли;	
										
	Возврат HTTPСоединение;
	
КонецФункции

Функция КоннекторCOM(СтруктураПараметров)
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если Не СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Или ТипПлатформы.Linux_x86_64 Тогда
		
		COMConnector = Новый COMObject("V83.COMConnector"); 
		
		ФайловыйВариантРаботы = СтруктураПараметров.COMФайловаяБазаКорреспондент;
		
		// Формирование строки соединения.
		ШаблонСтрокиСоединения = "[СтрокаБазы][СтрокаАутентификации]";
		
		Если ФайловыйВариантРаботы Тогда
			СтрокаБазы = "File = ""&КаталогИнформационнойБазы""";
			СтрокаБазы = СтрЗаменить(СтрокаБазы, "&КаталогИнформационнойБазы",
			СтруктураПараметров.COMКаталогИнформационнойБазы);
		Иначе
			СтрокаБазы = "Srvr = ""&ИмяСервера1СПредприятия""; Ref = ""&ИмяИнформационнойБазыНаСервере1СПредприятия""";
			СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяСервера1СПредприятия",
			СтруктураПараметров.COMИмяСервера1СПредприятия);
			СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяИнформационнойБазыНаСервере1СПредприятия",
			СтруктураПараметров.COMИмяБазыНаСервере1СПредприятия);
		КонецЕсли;
		
		Если СтруктураПараметров.COMАутентификацияОперационнойСистемы Тогда
			СтрокаАутентификации = "";
		Иначе
			
			Если СтрНайти(СтруктураПараметров.COMИмяПользователя, """") Тогда
				СтруктураПараметров.COMИмяПользователя = СтрЗаменить(СтруктураПараметров.COMИмяПользователя, """", """""");
			КонецЕсли;
			
			Если СтрНайти(СтруктураПараметров.COMПароль, """") Тогда
				СтруктураПараметров.COMПароль = СтрЗаменить(СтруктураПараметров.COMПароль, """", """""");
			КонецЕсли;
			
			СтрокаАутентификации = "; Usr = ""&ИмяПользователя""; Pwd = ""&ПарольПользователя""";
			СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ИмяПользователя",
			СтруктураПараметров.COMИмяПользователя);
			СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ПарольПользователя",
			СтруктураПараметров.COMПароль);
		КонецЕсли;
		
		СтрокаСоединения = СтрЗаменить(ШаблонСтрокиСоединения, "[СтрокаБазы]", СтрокаБазы);
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[СтрокаАутентификации]", СтрокаАутентификации);
		
		Коннектор = COMConnector.Connect(СтрокаСоединения);
		
	Иначе                  
		ТекстОшибки = "Для текущего типа платформы ("
						+ СистемнаяИнформация.ТипПлатформы + ") не поддерживается COM";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Коннектор;	
	
КонецФункции

Функция КоннекторExtSys(СтруктураПараметров)
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если Не СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Или ТипПлатформы.Linux_x86_64 Тогда
		
		COMConnector = Новый COMObject(СтруктураПараметров.ExtSysИмяПриложенияCOM);
		
		СтрокаСоединения = ВРег(СтруктураПараметров.ExtSysСтрокаПодключения);
		ИмяПользователя = СтруктураПараметров.ExtSysИмяПользователя;
		Пароль = СтруктураПараметров.ExtSysПароль;
		
		Если ЗначениеЗаполнено(СтрокаСоединения) Тогда
			Если СтруктураПараметров.ExtSysИмяПриложенияCOM = "MSXML2.XMLHTTP" Тогда
				ТипРежима = 0; // Истина(1) или Ложь(0). Код будет выполняться, не ожидая ответа от сервера
				COMConnector.Open("GET", СтрокаСоединения, ТипРежима, ИмяПользователя, Пароль);
			Иначе
				СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&USER", ИмяПользователя);
				СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&PASSWORD", Пароль);		
				COMConnector.Open(СтрокаСоединения);
			КонецЕсли;
		КонецЕсли;
		
	Иначе                  
		ТекстОшибки = "Для текущего типа платформы ("
		+ СистемнаяИнформация.ТипПлатформы + ") не поддерживается COM";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат COMConnector;
	
КонецФункции

#Область ОбработчикиПоПодпискам //**********************************************

// Подписка EUF_ПроводникПриЗаписиДокумента для регистрации в исходящей очереди
//
// Параметры:
//  Источник		 - ДокументСсылка
//  Отказ			 - Булево - Отказ транзакции
//  РежимЗаписи		 - РежимЗаписиДокумента - Режим записи документа
//  РежимПроведения	 - РежимПроведенияДокумента - Режим проведения документа
//
Процедура ПриЗаписиДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	СобытиеПоПодписке = "ПриЗаписиДокумента";
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	ПараметрыПоОбъекту = Новый Структура;
	ПараметрыПоОбъекту.Вставить("ЭтоСсылочныйОбъект", Истина);
	ПараметрыПоОбъекту.Вставить("РежимЗаписи", РежимЗаписи);
	ПараметрыПоОбъекту.Вставить("РежимПроведения", РежимПроведения);
	ВыполнитьОбработкуПодписки(Источник, Отказ, СобытиеПоПодписке, ПараметрыПоОбъекту);
	
КонецПроцедуры

// Подписка EUF_ПроводникОбработкаПроведения для регистрации в исходящей очереди
//
// Параметры:
//  Источник		 - ДокументСсылка
//  Отказ			 - Булево - Отказ транзакции
//  РежимПроведения	 - РежимПроведенияДокумента - Режим проведения документа
//
Процедура ОбработкаПроведенияДокумента(Источник, Отказ, РежимПроведения) Экспорт
	
	СобытиеПоПодписке = "ОбработкаПроведения";
	ПараметрыПоОбъекту = Новый Структура;
	ПараметрыПоОбъекту.Вставить("ЭтоСсылочныйОбъект", Истина);
	ПараметрыПоОбъекту.Вставить("РежимПроведения", РежимПроведения);
	ВыполнитьОбработкуПодписки(Источник, Отказ, СобытиеПоПодписке, ПараметрыПоОбъекту);
	
КонецПроцедуры

// Подписка EUF_ПроводникПриЗаписиСправочника для регистрации в исходящей очереди
//
// Параметры:
//  Источник		 - СправочникСсылка
//  Отказ			 - Булево - Отказ транзакции
//
Процедура ПриЗаписиСправочника(Источник, Отказ) Экспорт
	
	СобытиеПоПодписке = "ПриЗаписиСправочника";
	ПараметрыПоОбъекту = Новый Структура;
	ПараметрыПоОбъекту.Вставить("ЭтоСсылочныйОбъект", Истина);
	ВыполнитьОбработкуПодписки(Источник, Отказ, СобытиеПоПодписке, ПараметрыПоОбъекту);
	
КонецПроцедуры

// Подписка EUF_ПроводникПередУдалениемДокумента для регистрации в исходящей очереди
//
// Параметры:
//  Источник		 - ДокументСсылка
//  Отказ			 - Булево - Отказ транзакции
//
Процедура ПередУдалениемДокумента(Источник, Отказ) Экспорт
	
	СобытиеПоПодписке = "ПередУдалениемДокумента";
	ПараметрыПоОбъекту = Новый Структура;
	ПараметрыПоОбъекту.Вставить("ЭтоСсылочныйОбъект", Истина);
	ВыполнитьОбработкуПодписки(Источник, Отказ, СобытиеПоПодписке, ПараметрыПоОбъекту);
	
КонецПроцедуры

// Подписка EUF_ПроводникПередУдалениемСправочника для регистрации в исходящей очереди
//
// Параметры:
//  Источник		 - СправочникСсылка
//  Отказ			 - Булево - Отказ транзакции
//
Процедура ПередУдалениемСправочника(Источник, Отказ) Экспорт
	
	СобытиеПоПодписке = "ПередУдалениемСправочника";
	ПараметрыПоОбъекту = Новый Структура;
	ПараметрыПоОбъекту.Вставить("ЭтоСсылочныйОбъект", Истина);
	ВыполнитьОбработкуПодписки(Источник, Отказ, СобытиеПоПодписке, ПараметрыПоОбъекту);
	
КонецПроцедуры

Процедура ВыполнитьОбработкуПодписки(Источник, Отказ, СобытиеПоПодписке, ПараметрыПоОбъекту)

	Если Отказ Тогда
		Возврат;
	КонецЕсли;		
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПоОбъекту.ЭтоСсылочныйОбъект
		И Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИсключитьИзОбработки = Источник.ДополнительныеСвойства.Свойство("EUF_ПроводникНеРегистрировать");
	Если ИсключитьИзОбработки Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = XMLТипЗнч(Источник).ИмяТипа;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодпискиОбмена.ТипСообщения КАК ТипСообщения,
	|	ПодпискиОбмена.ОбрабатыватьИсходящееСообщениеСразу КАК ОбрабатыватьИсходящееСообщениеСразу,
	|	ПодпискиОбмена.ОбработчикВМоментСобытия КАК ОбработчикВМоментСобытия
	|ИЗ
	|	РегистрСведений.EUF_ПроводникПодпискиОбмена КАК ПодпискиОбмена
	|ГДЕ
	|	ПодпискиОбмена.ТипОбъекта = &ТипОбъекта
	|	И ПодпискиОбмена.СобытиеПоПодписке = &СобытиеПоПодписке
	|	И ПодпискиОбмена.Используется = ИСТИНА";
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("СобытиеПоПодписке", СобытиеПоПодписке);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		ТипИсходящегоСообщения = Выборка.ТипСообщения;
		
		ПараметрыСообщения = ИнициализироватьПараметрыСозданияИсходящих(ТипИсходящегоСообщения);
		Если ПараметрыПоОбъекту.ЭтоСсылочныйОбъект Тогда
			ПараметрыСообщения.Вставить("ВыгружаемыйОбъектСсылка", Источник.Ссылка);
		КонецЕсли;
		ПараметрыСообщения.Вставить("ОбрабатыватьИсходящееСообщениеСразу", Выборка.ОбрабатыватьИсходящееСообщениеСразу);
		ПараметрыСообщения.Вставить("ОбработчикВМоментСобытия", Выборка.ОбработчикВМоментСобытия); 
				
		EUF_ПроводникПереопределяемый.ВыполнитьОбработкуПодписки(ПараметрыСообщения, ТипИсходящегоСообщения,
													Источник, Отказ, СобытиеПоПодписке,
													ПараметрыПоОбъекту);
	КонецЦикла;
												
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Подписка EUF_ПроводникПриЗаписиРегистраСведений
//
// Параметры:
//  Источник		 - РегистрСведенийНаборЗаписей
//  Отказ			 - Булево - Отказ транзакции
//	Замещение        - Булево - Замещение существующей записи
//
Процедура ПриЗаписиРегистраСведений(Источник, Отказ, Замещение) Экспорт
	
	СобытиеПоПодписке = "ПриЗаписиРегистраСведений";
	ПараметрыПоОбъекту = Новый Структура;
	ПараметрыПоОбъекту.Вставить("ЭтоСсылочныйОбъект", Ложь);
	ПараметрыПоОбъекту.Вставить("Замещение", Замещение);
	
	ВыполнитьОбработкуПодписки(Источник, Отказ, СобытиеПоПодписке, ПараметрыПоОбъекту);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиПоПодпискам

#Область ИсходящиеОбращения //**********************************************************

Функция ИнициализироватьПараметрыИсходящих()
			
	ПараметрыИсходящих = Новый Структура;
	ПараметрыИсходящих.Вставить("НастройкаСсылка");
	ПараметрыИсходящих.Вставить("ТипИсходящегоСообщения");
	ПараметрыИсходящих.Вставить("ВнешняяСистема");
	ПараметрыИсходящих.Вставить("РежимОтладки", Ложь);
	ПараметрыИсходящих.Вставить("СинхронныйРежим", Ложь); 
	ПараметрыИсходящих.Вставить("ЕстьВОчереди", Ложь);
	ПараметрыИсходящих.Вставить("ВозвращатьОтветВИнтерфейс", Ложь);
	ПараметрыИсходящих.Вставить("ИнтерфейсТранспорта");
	ПараметрыИсходящих.Вставить("ПараметрыПодключенияСсылка"); 
	
	ПараметрыИсходящих.Вставить("СпособФормирования");
	ПараметрыИсходящих.Вставить("ДанныеВФорматеТранспорта");
	ПараметрыИсходящих.Вставить("ОписаниеФормата", "");
	ПараметрыИсходящих.Вставить("ИдентификаторСообщения", "");
	ПараметрыИсходящих.Вставить("ТехническоеИмя", "");
	ПараметрыИсходящих.Вставить("ИдентификаторВнешнейСистемы", "");
	ПараметрыИсходящих.Вставить("ИнтеграционныйПроцесс");
	ПараметрыИсходящих.Вставить("ИдентификаторПроцесса", "");
	
	ПараметрыИсходящих.Вставить("ИспользоватьОбработчикПослеОтправки", Ложь);
	ПараметрыИсходящих.Вставить("ИспользоватьОбработчикПередОтправкой", Ложь);
	ПараметрыИсходящих.Вставить("ИспользоватьТранспортОбработчика", Ложь);
	ПараметрыИсходящих.Вставить("ОбработкаПриОтправке");
	ПараметрыИсходящих.Вставить("ОбрабатыватьРезультатЗапроса");
	ПараметрыИсходящих.Вставить("ТипВходящегоДляОбработкиРезультата");
	
	ПараметрыИсходящих.Вставить("СжиматьВZip");
	ПараметрыИсходящих.Вставить("ДоступноПопытокОбработки", 1);
	
	ПараметрыИсходящих.Вставить("РесурсНаСервере", ""); // для HTTP запросов
	
	Возврат ПараметрыИсходящих;
	
КонецФункции	

// Используется общий запрос, для возможности вызова из обработки администрирования при ручной выгрузке
// 		ОсновнаяФорма -> Процедура ОбработатьИсходящееСообщениеНаСервере()
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаИсходящихСНастройкамиОбработки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ИспользуемыеНастройкиДляСообщенийСрезПоследних.НастройкаДляСообщения, НЕОПРЕДЕЛЕНО) КАК НастройкаСсылка,
	|	ИспользуемыеНастройкиДляСообщенийСрезПоследних.ТипСообщения КАК ТипИсходящегоСообщения,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ИспользуемыеНастройкиДляСообщенийСрезПоследних.НастройкаДляСообщения КАК Справочник.EUF_ПроводникНастройкиИсходящихСообщений).СинхронныйРежим, ЛОЖЬ) КАК СинхронныйРежим,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ИспользуемыеНастройкиДляСообщенийСрезПоследних.НастройкаДляСообщения КАК Справочник.EUF_ПроводникНастройкиИсходящихСообщений).СпособФормированияСообщений, НЕОПРЕДЕЛЕНО) КАК СпособФормирования,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ИспользуемыеНастройкиДляСообщенийСрезПоследних.НастройкаДляСообщения КАК Справочник.EUF_ПроводникНастройкиИсходящихСообщений).ДоступноПопытокОбработки, 1) КАК ДоступноПопытокОбработки,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ИспользуемыеНастройкиДляСообщенийСрезПоследних.НастройкаДляСообщения КАК Справочник.EUF_ПроводникНастройкиИсходящихСообщений).ВозвращатьОтветВИнтерфейс, ЛОЖЬ) КАК ВозвращатьОтветВИнтерфейс
	|ПОМЕСТИТЬ НастройкиПоТипамСообщений
	|ИЗ
	|	РегистрСведений.EUF_ПроводникИспользуемыеНастройкиДляСообщений.СрезПоследних(
	|			,
	|			&КонкретнаяНастройка = НЕОПРЕДЕЛЕНО
	|				И ТипСообщения В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТипыСообщений.ТипИсходящегоСообщения КАК ТипИсходящегоСообщения
	|					ИЗ
	|						ТипыСообщений КАК ТипыСообщений)) КАК ИспользуемыеНастройкиДляСообщенийСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиИсходящихСообщений.Ссылка,
	|	&КонкретныйТипСообщения,
	|	НастройкиИсходящихСообщений.СинхронныйРежим,
	|	НастройкиИсходящихСообщений.СпособФормированияСообщений,
	|	НастройкиИсходящихСообщений.ДоступноПопытокОбработки,
	|	НастройкиИсходящихСообщений.ВозвращатьОтветВИнтерфейс
	|ИЗ
	|	Справочник.EUF_ПроводникНастройкиИсходящихСообщений КАК НастройкиИсходящихСообщений
	|ГДЕ
	|	&КонкретнаяНастройка <> НЕОПРЕДЕЛЕНО
	|	И НастройкиИсходящихСообщений.Ссылка = &КонкретнаяНастройка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипИсходящегоСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулИсходящих.ВнешняяСистема КАК ВнешняяСистема,
	|	ПулИсходящих.ИсходящееСообщение КАК ИсходящееСообщение,
	|	ПулИсходящих.УникальноеВремяРегистрации КАК УникальноеВремяРегистрации, 
	|	ПулИсходящих.ЕстьВОчереди,
	|	ЕСТЬNULL(НастройкиПоТипамСообщений.ТипИсходящегоСообщения, ЗНАЧЕНИЕ(Справочник.EUF_ПроводникТипИсходящегоСообщения.ПустаяСсылка)) КАК ТипИсходящегоСообщения,
	|	НастройкиПоТипамСообщений.ТипИсходящегоСообщения.ТехническоеИмя КАК ТехническоеИмя,
	|	ЕСТЬNULL(НастройкиПоТипамСообщений.НастройкаСсылка, НЕОПРЕДЕЛЕНО) КАК НастройкаСсылка,
	|	ЕСТЬNULL(НастройкиПоТипамСообщений.СинхронныйРежим, ЛОЖЬ) КАК СинхронныйРежим,
	|	ЕСТЬNULL(НастройкиПоТипамСообщений.СпособФормирования, ЗНАЧЕНИЕ(Перечисление.EUF_ПроводникСпособыПреобразованияСообщений.Пустаяссылка)) КАК СпособФормирования,
	|	&РежимОтладки КАК РежимОтладки,	
	|	ЕСТЬNULL(НастройкиПоТипамСообщений.ДоступноПопытокОбработки, 1) КАК ДоступноПопытокОбработки,
	|	СообщенияИсходящие.СчетчикПопытокОбработки КАК ИзрасходованоПопыток,
	|	НастройкиПоТипамСообщений.ВозвращатьОтветВИнтерфейс КАК ВозвращатьОтветВИнтерфейс,
	|	ЕСТЬNULL(СообщенияИсходящие.ТипСообщения.ИнтеграционныйПроцесс, ЗНАЧЕНИЕ(Справочник.EUF_ПроводникИнтеграционныеПроцессы.Пустаяссылка)) КАК ИнтеграционныйПроцесс
	|ИЗ
	|	ПулИсходящих КАК ПулИсходящих
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиПоТипамСообщений КАК НастройкиПоТипамСообщений
	|		ПО ПулИсходящих.ТипИсходящегоСообщения = НастройкиПоТипамСообщений.ТипИсходящегоСообщения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.EUF_ПроводникСообщенияИсходящие КАК СообщенияИсходящие
	|		ПО ПулИсходящих.ИсходящееСообщение = СообщенияИсходящие.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	УникальноеВремяРегистрации";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

// Используется общий запрос, для возможности вызова из обработки администрирования при ручной выгрузке
// 		ОсновнаяФорма -> Процедура ВыгрузитьСообщениеВоВнешнююСистемуНаСервере()
//
// Возвращаемое значение:
//	Строка - текст запроса.
// 
Функция ТекстЗапросаИсходящихСНастройкамиВыгрузки() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ИспользуемыеНастройкиДляСообщенийСрезПоследних.НастройкаДляСообщения, НЕОПРЕДЕЛЕНО) КАК НастройкаСсылка,
	|	ИспользуемыеНастройкиДляСообщенийСрезПоследних.ТипСообщения КАК ТипИсходящегоСообщения,
	|	ИспользуемыеНастройкиДляСообщенийСрезПоследних.НастройкаДляСообщения.СинхронныйРежим КАК СинхронныйРежим,
	|	ИспользуемыеНастройкиДляСообщенийСрезПоследних.НастройкаДляСообщения.СпособФормированияСообщений КАК СпособФормирования
	|ПОМЕСТИТЬ НастройкиПоТипамСообщений
	|ИЗ
	|	РегистрСведений.EUF_ПроводникИспользуемыеНастройкиДляСообщений.СрезПоследних(
	|			,
	|			&КонкретнаяНастройка = НЕОПРЕДЕЛЕНО
	|				И ТипСообщения В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТипыСообщений.ТипИсходящегоСообщения КАК ТипИсходящегоСообщения
	|					ИЗ
	|						ТипыСообщений КАК ТипыСообщений)) КАК ИспользуемыеНастройкиДляСообщенийСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	EUF_ПроводникНастройкиИсходящихСообщений.Ссылка,
	|	&КонкретныйТипСообщения,
	|	EUF_ПроводникНастройкиИсходящихСообщений.СинхронныйРежим,
	|	EUF_ПроводникНастройкиИсходящихСообщений.СпособФормированияСообщений
	|ИЗ
	|	Справочник.EUF_ПроводникНастройкиИсходящихСообщений КАК EUF_ПроводникНастройкиИсходящихСообщений
	|ГДЕ
	|	&КонкретнаяНастройка <> НЕОПРЕДЕЛЕНО
	|	И EUF_ПроводникНастройкиИсходящихСообщений.Ссылка = &КонкретнаяНастройка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипИсходящегоСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПулИсходящих.ТипИсходящегоСообщения КАК Справочник.EUF_ПроводникТипИсходящегоСообщения) КАК ТипИсходящегоСообщения,
	|	ПулИсходящих.ВнешняяСистема КАК ВнешняяСистема,
	|	ПулИсходящих.ЕстьВОчереди КАК ЕстьВОчереди,
	|	ВЫРАЗИТЬ(ПулИсходящих.ИсходящееСообщение КАК Справочник.EUF_ПроводникСообщенияИсходящие) КАК ИсходящееСообщение,
	|	ПулИсходящих.УникальноеВремяРегистрации КАК УникальноеВремяРегистрации,
	|	НастройкиПоТипамСообщений.НастройкаСсылка КАК НастройкаСсылка,
	|	ВЫБОР
	|		КОГДА НастройкиИсходящихСообщений.ДругиеПараметрыПодключения.ВерсияДанных ЕСТЬ NULL
	|			ТОГДА ПулИсходящих.ПараметрыПодключенияСсылка
	|		ИНАЧЕ НастройкиИсходящихСообщений.ДругиеПараметрыПодключения
	|	КОНЕЦ КАК ПараметрыПодключенияСсылка,
	|	ЕСТЬNULL(НастройкиИсходящихСообщений.ИнтерфейсТранспорта, ЗНАЧЕНИЕ(Перечисление.EUF_ПроводникИнтерфейсыТранспорта.Пустаяссылка)) КАК ИнтерфейсТранспорта,
	|	ЕСТЬNULL(НастройкиИсходящихСообщений.СинхронныйРежим, ЛОЖЬ) КАК СинхронныйРежим,
	|	ЕСТЬNULL(НастройкиИсходящихСообщений.ИспользоватьОбработчикПослеОтправки, ЛОЖЬ) КАК ИспользоватьОбработчикПослеОтправки,
	|	ЕСТЬNULL(НастройкиИсходящихСообщений.ИспользоватьОбработчикПередОтправкой, ЛОЖЬ) КАК ИспользоватьОбработчикПередОтправкой,
	|	ЕСТЬNULL(НастройкиИсходящихСообщений.ИспользоватьТранспортОбработчика, ЛОЖЬ) КАК ИспользоватьТранспортОбработчика,
	|	ЕСТЬNULL(НастройкиИсходящихСообщений.ОбработкаПриОтправке, НЕОПРЕДЕЛЕНО) КАК ОбработкаПриОтправке,
	|	ЕСТЬNULL(НастройкиИсходящихСообщений.ОбрабатыватьРезультатЗапроса, ЛОЖЬ) КАК ОбрабатыватьРезультатЗапроса,
	|	ЕСТЬNULL(НастройкиИсходящихСообщений.ТипВходящегоДляОбработкиРезультата, НЕОПРЕДЕЛЕНО) КАК ТипВходящегоДляОбработкиРезультата,
	|	ЕСТЬNULL(НастройкиИсходящихСообщений.СжиматьВZip, ЛОЖЬ) КАК СжиматьВZip,
	|	ЕСТЬNULL(НастройкиИсходящихСообщений.ДоступноПопытокОбработки, 1) КАК ДоступноПопытокОбработки,
	|	ЕСТЬNULL(НастройкиИсходящихСообщений.ВозвращатьОтветВИнтерфейс, ЛОЖЬ) КАК ВозвращатьОтветВИнтерфейс
	|ПОМЕСТИТЬ СообщенияВместеСНастройками
	|ИЗ
	|	ПулИсходящих КАК ПулИсходящих
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиПоТипамСообщений КАК НастройкиПоТипамСообщений
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.EUF_ПроводникНастройкиИсходящихСообщений КАК НастройкиИсходящихСообщений
	|			ПО НастройкиПоТипамСообщений.НастройкаСсылка = НастройкиИсходящихСообщений.Ссылка
	|		ПО ПулИсходящих.ТипИсходящегоСообщения = НастройкиПоТипамСообщений.ТипИсходящегоСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СообщенияВместеСНастройками.ПараметрыПодключенияСсылка КАК ПараметрыПодключенияСсылка,
	|	СообщенияВместеСНастройками.ИнтерфейсТранспорта КАК ИнтерфейсТранспорта,
	|	НЕОПРЕДЕЛЕНО КАК Коннектор
	|ИЗ
	|	СообщенияВместеСНастройками КАК СообщенияВместеСНастройками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщенияВместеСНастройками.ВнешняяСистема КАК ВнешняяСистема,
	|	СообщенияВместеСНастройками.ТипИсходящегоСообщения КАК ТипИсходящегоСообщения,
	|	СообщенияВместеСНастройками.ИсходящееСообщение КАК ИсходящееСообщение,
	|	СообщенияВместеСНастройками.УникальноеВремяРегистрации КАК УникальноеВремяРегистрации,
	|	СообщенияВместеСНастройками.ИнтерфейсТранспорта КАК ИнтерфейсТранспорта,
	|	СообщенияВместеСНастройками.ПараметрыПодключенияСсылка КАК ПараметрыПодключенияСсылка,
	|	ЕСТЬNULL(ДанныеВФорматеТранспорта.ДанныеОбмена, НЕОПРЕДЕЛЕНО) КАК ДанныеВФорматеТранспорта,
	|	ЕСТЬNULL(ДанныеВФорматеТранспорта.ОписаниеФормата, НЕОПРЕДЕЛЕНО) КАК ОписаниеФормата,
	|	ЕСТЬNULL(СообщенияВместеСНастройками.ИсходящееСообщение.ИдентификаторСообщения, """") КАК ИдентификаторСообщения,
	|	ЕСТЬNULL(СообщенияВместеСНастройками.ТипИсходящегоСообщения.ТехническоеИмя, """") КАК ТехническоеИмя,
	|	ВЫРАЗИТЬ(&ТекущийУзел КАК ПланОбмена.EUF_ПроводникВнешниеСистемы).Код КАК ИдентификаторВнешнейСистемы,
	|	ЕСТЬNULL(СообщенияВместеСНастройками.ТипИсходящегоСообщения.ИнтеграционныйПроцесс, НЕОПРЕДЕЛЕНО) КАК ИнтеграционныйПроцесс,
	|	ЕСТЬNULL(СообщенияВместеСНастройками.ТипИсходящегоСообщения.ИнтеграционныйПроцесс.ИдентификаторПроцесса, """") КАК ИдентификаторПроцесса,
	|	СообщенияВместеСНастройками.НастройкаСсылка КАК НастройкаСсылка,
	|	СообщенияВместеСНастройками.СинхронныйРежим КАК СинхронныйРежим,
	|	СообщенияВместеСНастройками.ИспользоватьОбработчикПослеОтправки КАК ИспользоватьОбработчикПослеОтправки,
	|	СообщенияВместеСНастройками.ИспользоватьОбработчикПередОтправкой КАК ИспользоватьОбработчикПередОтправкой,
	|	СообщенияВместеСНастройками.ИспользоватьТранспортОбработчика КАК ИспользоватьТранспортОбработчика,
	|	СообщенияВместеСНастройками.ОбработкаПриОтправке КАК ОбработкаПриОтправке,
	|	СообщенияВместеСНастройками.ОбрабатыватьРезультатЗапроса КАК ОбрабатыватьРезультатЗапроса,
	|	СообщенияВместеСНастройками.ТипВходящегоДляОбработкиРезультата КАК ТипВходящегоДляОбработкиРезультата,
	|	СообщенияВместеСНастройками.ЕстьВОчереди КАК ЕстьВОчереди,
	|	СообщенияВместеСНастройками.СжиматьВZip КАК СжиматьВZip,
	|	&РежимОтладки КАК РежимОтладки,
	|	СообщенияВместеСНастройками.ДоступноПопытокОбработки КАК ДоступноПопытокОбработки,
	|	СообщенияВместеСНастройками.ИсходящееСообщение.СчетчикПопытокОбработки КАК ИзрасходованоПопыток,
	|	СообщенияВместеСНастройками.ВозвращатьОтветВИнтерфейс КАК ВозвращатьОтветВИнтерфейс,
	|	СообщенияВместеСНастройками.ПараметрыПодключенияСсылка.HTTPРесурсНаСервере КАК РесурсНаСервере
	|ИЗ
	|	СообщенияВместеСНастройками КАК СообщенияВместеСНастройками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.EUF_ПроводникДанныеВФорматеТранспорта КАК ДанныеВФорматеТранспорта
	|		ПО СообщенияВместеСНастройками.ИсходящееСообщение = ДанныеВФорматеТранспорта.Сообщение
	|
	|УПОРЯДОЧИТЬ ПО
	|	УникальноеВремяРегистрации";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

// Инициализирует параметры исходящего сообщения по умолчанию
//
// Параметры:
//  ТипИсходящегоСообщения	- СправочникСсылка.EUF_ПроводникТипИсходящегоСообщения - тип исходящего
// 
// Возвращаемое значение:
//  Структура - параметры для исходящего сообщения
//
Функция ИнициализироватьПараметрыСозданияИсходящих(ТипИсходящегоСообщения) Экспорт
	
	ПараметрыСообщения = Новый Структура;	
	ПараметрыСообщения.Вставить("ТипИсходящегоСообщения", ТипИсходящегоСообщения);
	ПараметрыСообщения.Вставить("ВыгружаемыйОбъектСсылка");
	
	ПараметрыСообщения.Вставить("ОбъектыОбмена", Новый Массив);
	
	// Содержит комбинацию отбора данных строкой. Например: (<Период><ТипДокументов><GUIDОрганизации>)
	// или GUID выгружаемого объекта
	ПараметрыСообщения.Вставить("КлючВыгружаемыхДанных", "");
	
	// Элемент справочника EUF_ПроводникСообщенияВходящие или EUF_ПроводникСообщенияИсходящие
	ПараметрыСообщения.Вставить("СсылкаНаСвязанноеСообщение");
	
	// Может содержать в себе передаваемые данные в произвольном формате для доп обработки
	ПараметрыСообщения.Вставить("ПроизвольныеДанные", Неопределено); 
		
	// Текущий пользователь
	ПараметрыСообщения.Вставить("Пользователь", EUF_ПроводникНаВремяВызоваПовтИсп.ТекущийПользователь());
	
	// Произвольное значение (например, текст или структура) для возрата в пользовательский интерфейс
	// или объекты бизнес процесса (например информации об ошибке)
	ПараметрыСообщения.Вставить("ИнфоИнициатору");
	
	// Состояние, которое устанавливается новому исходящему сообщению.
	// Для случаев когда преобразование в формат транспорта производиться непосредственно в интерфейсе инициатора,
	// состояние может быть переопределено сразу на ожидание выгрузки
	ПараметрыСообщения.Вставить("СостояниеИсходящего", Перечисления.EUF_ПроводникСостоянияИсходящих.Зарегистрировано);
	
	// При переопределении параметра при создании сообщения (в процедуре создания) оно будет зарегистрировано в очереди
	ПараметрыСообщения.Вставить("РегистрироватьВОчереди", Ложь);
	
	Возврат ПараметрыСообщения;
	
КонецФункции

// Создает элемент справочника исходящего сообщения с заданными параметрами
//
// Параметры:
//  ПараметрыСообщения		 - Структура - (см. EUF_ПроводникОбмен.ИнициализироватьПараметрыСозданияИсходящих())
//  ТипИсходящегоСообщения	 - СправочникСсылка.EUF_ПроводникТипИсходящегоСообщения - тип исходящего
// 
// Возвращаемое значение:
//  СправочникСсылка.EUF_ПроводникСообщенияИсходящие - элемент исходящего
//
Функция СоздатьИсходящееСообщение(ПараметрыСообщения, ТипИсходящегоСообщения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыСообщения.Свойство("ВнешняяСистема") Тогда
		ВнешняяСистема = ПараметрыСообщения.ВнешняяСистема;
	Иначе
		ВнешняяСистема = EUF_ПроводникПовтИсп.ВнешняяСистемаПоТипуИсходящегоСообщения(ТипИсходящегоСообщения);
		ПараметрыСообщения.Вставить("ВнешняяСистема", ВнешняяСистема);
	КонецЕсли;
	
	СообщениеОбъект = Справочники.EUF_ПроводникСообщенияИсходящие.СоздатьЭлемент();
	
	ВыгружаемыйОбъектСсылка = Неопределено;
	ПроизвольныеДанные = Неопределено;
	Если ПараметрыСообщения.Свойство("ВыгружаемыйОбъектСсылка") Тогда
		ВыгружаемыйОбъектСсылка = ПараметрыСообщения.ВыгружаемыйОбъектСсылка;
	КонецЕсли;
	Если ПараметрыСообщения.Свойство("ОбъектыОбмена") Тогда
		ОбъектыОбмена = ПараметрыСообщения.ОбъектыОбмена;
		ТаблицаОбъектовОбмена = СообщениеОбъект.ОбъектыОбмена;
		
		Если ТипЗнч(ОбъектыОбмена) = Тип("Массив") Тогда
			СписокОбъектов = Новый СписокЗначений;
			СписокОбъектов.ЗагрузитьЗначения(ОбъектыОбмена);
		Иначе
			СписокОбъектов = ОбъектыОбмена;
		КонецЕсли;	
		
		// Сохраним сортировку			
		Для Каждого ЭлементСписка Из СписокОбъектов Цикл
			НовСтрока = ТаблицаОбъектовОбмена.Добавить();
			НовСтрока.ОбъектОбмена = ЭлементСписка.Значение;
		КонецЦикла;	
				
	КонецЕсли;	
	Если ПараметрыСообщения.Свойство("ПроизвольныеДанные", ПроизвольныеДанные)	Тогда
		// Данные, которые могут быть переданы из интерфейса и которые не храняться в БД.
		// Также могут быть переданы уже подготовленные данные относительно объекта выгрузки.
		// Данные после успешной выгрузки будут удалены автоматически (см. ЗафиксироватьВыгрузкуИсходящего()) 
		// В ручном режиме (РежимОтладки) данные не удаляются.
		СжатиеДанных = Новый СжатиеДанных(9);
		ПроизвольныеДанные = Новый ХранилищеЗначения(ПроизвольныеДанные, СжатиеДанных);
	КонецЕсли;
	
	СсылкаНаСвязанноеСообщение = ПараметрыСообщения.СсылкаНаСвязанноеСообщение;
		
	// Для возможности указания GUID в реквизите
	ИдентификаторСообщения = Новый УникальныйИдентификатор();
	НоваяСсылка = Справочники.EUF_ПроводникСообщенияИсходящие.ПолучитьСсылку(ИдентификаторСообщения);
	СообщениеОбъект.УстановитьСсылкуНового(НоваяСсылка);
	
	СообщениеОбъект.ИдентификаторСообщения = ИдентификаторСообщения;
	СообщениеОбъект.ТипСообщения = ТипИсходящегоСообщения;
	СообщениеОбъект.СсылкаНаСвязанныйОбъект = ВыгружаемыйОбъектСсылка;
	СообщениеОбъект.ПроизвольныеДанные = ПроизвольныеДанные;
	СообщениеОбъект.ВнешняяСистема = ВнешняяСистема;
	СообщениеОбъект.СостояниеСообщения = ПараметрыСообщения.СостояниеИсходящего;
	
	СообщениеОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	СообщениеОбъект.УникальноеВремяСоздания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ЗначениеЗаполнено(СсылкаНаСвязанноеСообщение) Тогда
		НовСтрока = СообщениеОбъект.СвязанныеСообщения.Добавить();
		НовСтрока.СвязанноеСообщение = СсылкаНаСвязанноеСообщение;			
	КонецЕсли;
	
	Попытка
		СообщениеОбъект.Записать();	
		ПараметрыСообщения.Вставить("ИсходящееСообщение", СообщениеОбъект.Ссылка);
		
		Если ПараметрыСообщения.РегистрироватьВОчереди Тогда
			ЗарегистрироватьВИсходящуюОчередь(ПараметрыСообщения, ТипИсходящегоСообщения);
		КонецЕсли;	
		
		Возврат СообщениеОбъект.Ссылка;
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		EUF_ПроводникВызовСервера.ВыполнитьЛогирование("Ошибка создания сообщения исходящего",
					УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, ТипИсходящегоСообщения, Истина);
		Возврат Неопределено;			
	КонецПопытки;
		
КонецФункции

Процедура ЗарегистрироватьВИсходящуюОчередь(ДанныеОбмена, ТипИсходящегоСообщения, ДопПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Запись в регистре очереди
	ЗаписатьВИсходящуюОчередь(ДанныеОбмена, ТипИсходящегоСообщения);
	
	ОписаниеСобытия = "Зарегистрировано сообщение в исходящей очереди";
	EUF_ПроводникВызовСервера.ВыполнитьЛогирование("Регистрация в исходящей очереди", УровеньЖурналаРегистрации.Информация,
						ОписаниеСобытия, ДанныеОбмена.ИсходящееСообщение, Истина, ДанныеОбмена.ИсходящееСообщение);
						
	УстановитьПривилегированныйРежим(Ложь);					
	
КонецПроцедуры

Процедура ЗаписатьВИсходящуюОчередь(ДанныеОбмена, ТипИсходящегоСообщения) Экспорт
	
	// В автоматическом режиме не предусматривается создание записей с одним и тем же сообщением.
	// Набор из регистра не очищается в автоматическом режиме, для исключения избыточного чтения очереди 
	Если ДанныеОбмена.Свойство("РучнаяРегистрация") Тогда
		РучнаяРегистрация = ДанныеОбмена.РучнаяРегистрация;
	Иначе
		РучнаяРегистрация = Ложь;
	КонецЕсли;	
	
	Если РучнаяРегистрация Тогда
		НаборЗаписей = РегистрыСведений.EUF_ПроводникОчередьИсходящих.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.ИсходящееСообщение.Установить(ДанныеОбмена.ИсходящееСообщение);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбмена.ВыгружаемыйОбъектСсылка) Тогда
		ХэшИдентификатор = EUF_ПроводникШлюзБСПСервер.КонтрольнаяСуммаСтрокой(ДанныеОбмена.ВыгружаемыйОбъектСсылка);
	ИначеЕсли ЗначениеЗаполнено(ДанныеОбмена.ПроизвольныеДанные) Тогда
		ХэшИдентификатор = EUF_ПроводникШлюзБСПСервер.КонтрольнаяСуммаСтрокой(ДанныеОбмена.ПроизвольныеДанные);	 
	Иначе
		ХэшИдентификатор = EUF_ПроводникШлюзБСПСервер.КонтрольнаяСуммаСтрокой(ДанныеОбмена.КлючВыгружаемыхДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХэшИдентификатор) Тогда
		// Проверяем наличие записи в регистре
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	EUF_ПроводникОчередьИсходящих.СостояниеОчереди КАК СостояниеОчереди
		|ИЗ
		|	РегистрСведений.EUF_ПроводникОчередьИсходящих КАК EUF_ПроводникОчередьИсходящих
		|ГДЕ
		|	EUF_ПроводникОчередьИсходящих.ДоступноДляОбработки = ИСТИНА
		|	И EUF_ПроводникОчередьИсходящих.ВнешняяСистема = &ВнешняяСистема
		|	И EUF_ПроводникОчередьИсходящих.СостояниеОчереди = ЗНАЧЕНИЕ(Перечисление.EUF_ПроводникСостоянияИсходящих.Зарегистрировано)
		|	И EUF_ПроводникОчередьИсходящих.ТипСообщения = &ТипСообщения
		|	И EUF_ПроводникОчередьИсходящих.ХэшИдентификатор = &ХэшИдентификатор";
		Запрос.УстановитьПараметр("ВнешняяСистема", ДанныеОбмена.ВнешняяСистема);	
		Запрос.УстановитьПараметр("ТипСообщения", ТипИсходящегоСообщения);
		Запрос.УстановитьПараметр("ХэшИдентификатор", ХэшИдентификатор);		           
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			// Выполняем очистку существующих записей очереди, чтобы заменить обновленными изменениями
			НаборЗаписей = РегистрыСведений.EUF_ПроводникОчередьИсходящих.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДоступноДляОбработки.Установить(Истина);
			НаборЗаписей.Отбор.ВнешняяСистема.Установить(ДанныеОбмена.ВнешняяСистема);
			НаборЗаписей.Отбор.СостояниеОчереди.Установить(Выборка.СостояниеОчереди);
			НаборЗаписей.Отбор.ТипСообщения.Установить(ТипИсходящегоСообщения);
			НаборЗаписей.Отбор.ХэшИдентификатор.Установить(ХэшИдентификатор);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();			
		КонецЦикла;	
	КонецЕсли;
	
	МенеджерЗаписей = РегистрыСведений.EUF_ПроводникОчередьИсходящих.СоздатьМенеджерЗаписи();
	
	ТекущаяДата = ТекущаяДатаСеанса();
	МенеджерЗаписей.ДоступноДляОбработки	= Истина;
	МенеджерЗаписей.ВнешняяСистема			= ДанныеОбмена.ВнешняяСистема;
	МенеджерЗаписей.СостояниеОчереди 		= ДанныеОбмена.СостояниеИсходящего;
	МенеджерЗаписей.ТипСообщения 			= ТипИсходящегоСообщения;
	МенеджерЗаписей.ИсходящееСообщение 		= ДанныеОбмена.ИсходящееСообщение;
	МенеджерЗаписей.ХэшИдентификатор 		= ХэшИдентификатор;
	МенеджерЗаписей.ДатаРегистрации 		= ТекущаяДата;
	МенеджерЗаписей.День 					= День(ТекущаяДата);
	МенеджерЗаписей.ГодИМесяц 				= Формат(ТекущаяДата, "ДФ=yyyy_MM");	
	МенеджерЗаписей.Пользователь 			= EUF_ПроводникШлюзБСПСервер.АвторизованныйПользователь();
	МенеджерЗаписей.УникальноеВремяРегистрации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	МенеджерЗаписей.Записать(); 	
	
КонецПроцедуры // ЗаписатьВИсходящуюОчередь()

Процедура ЗафиксироватьОбработкуИсходящего(ИсходящееСообщение, НастройкиПоТипуСообщения)
	
	Если НастройкиПоТипуСообщения.Свойство("БезВыгрузки") Тогда
		// Если установлено в обработчиках
		Возврат;
	КонецЕсли;
	
	СостояниеОжидания = Перечисления.EUF_ПроводникСостоянияИсходящих.ОжидаетОтправки;
	
	Если Не НастройкиПоТипуСообщения.СинхронныйРежим
		Или НастройкиПоТипуСообщения.ЕстьВОчереди Тогда
				
		НаборЗаписей = РегистрыСведений.EUF_ПроводникОчередьИсходящих.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИсходящееСообщение.Установить(ИсходящееСообщение);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			ЗаписьОчереди = НаборЗаписей[0];
			ЗаписьОчереди.ЕстьОшибки = Ложь;
			ЗаписьОчереди.Комментарий = "";
			ЗаписьОчереди.СостояниеОчереди = СостояниеОжидания;			
			НаборЗаписей.Записать();
		КонецЕсли;	
			
	КонецЕсли;
	
	ТекстИнформации = "Исходящее сообщение подготовлено к отправке ";
						
	ОбИсходящееСообщение = ИсходящееСообщение.ПолучитьОбъект();			
	ОбИсходящееСообщение.СостояниеСообщения = СостояниеОжидания;
	ОбИсходящееСообщение.ЕстьОшибки = Ложь;
	ОбИсходящееСообщение.СчетчикПопытокОбработки = 0;
	ОбИсходящееСообщение.Комментарий = ТекстИнформации;
	ОбИсходящееСообщение.Записать();
	
	EUF_ПроводникВызовСервера.ВыполнитьЛогирование("Подготовка исходящих сообщений",
					УровеньЖурналаРегистрации.Информация, ТекстИнформации,
					НастройкиПоТипуСообщения.ТипИсходящегоСообщения, Истина, ИсходящееСообщение);
	
КонецПроцедуры

Процедура ЗафиксироватьВыгрузкуИсходящего(ИсходящееСообщение, НастройкиПоТипуСообщения) 
	
	СостояниеВыгруженного = Перечисления.EUF_ПроводникСостоянияИсходящих.ВыгруженоВоВнешнююСистему;
	
	Если Не НастройкиПоТипуСообщения.СинхронныйРежим
		Или НастройкиПоТипуСообщения.ЕстьВОчереди Тогда
		
		НаборЗаписей = РегистрыСведений.EUF_ПроводникОчередьИсходящих.СоздатьНаборЗаписей();		
		НаборЗаписей.Отбор.ИсходящееСообщение.Установить(ИсходящееСообщение);
		НаборЗаписей.Прочитать();		
		Если НаборЗаписей.Количество() Тогда			
			ЗаписьОчереди = НаборЗаписей[0];
			ЗаписьОчереди.ЕстьОшибки = Ложь;
			ЗаписьОчереди.Комментарий = "";
			ЗаписьОчереди.СостояниеОчереди = СостояниеВыгруженного;
			ЗаписьОчереди.ДоступноДляОбработки = Ложь;
			НаборЗаписей.Записать();			
		КонецЕсли;
	КонецЕсли;
	
	ТекстИнформации = "Успешно выгружено сообщение";
	
	ОбИсходящееСообщение = ИсходящееСообщение.ПолучитьОбъект();
	ОбИсходящееСообщение.СостояниеСообщения = СостояниеВыгруженного;
	ОбИсходящееСообщение.ЕстьОшибки = Ложь;	
	ОбИсходящееСообщение.Комментарий = ТекстИнформации;
	ОбИсходящееСообщение.Записать();	
	
	EUF_ПроводникВызовСервера.ВыполнитьЛогирование("Выгрузка сообщения во внешнюю систему",
					УровеньЖурналаРегистрации.Информация, ТекстИнформации,
					НастройкиПоТипуСообщения.ТипИсходящегоСообщения, Истина, ИсходящееСообщение);
	
КонецПроцедуры

// Используется для случаев, когда при обработке исходящего сообщения выгрузка не требуется
//
// Параметры:
//  ИсходящееСообщение		 - СправочникСсылка.EUF_ПроводникСообщенияИсходящие - исходящее сообщение
//  НастройкиПоТипуСообщения - Структура - содержит настройки по типу сообщения 
// 							полный состав см. общего модуля EUF_ПроводникОбмен - ИнициализироватьПараметрыИсходящих()
//  ТекстИнформации			 - Строка	 - текст для установки 
//
Процедура ЗафиксироватьОстановкуИсходящего(ИсходящееСообщение, НастройкиПоТипуСообщения,
											ТекстИнформации = "Выгрузка не требуется") Экспорт 
	
	СостояниеОстановки = Перечисления.EUF_ПроводникСостоянияИсходящих.БезВыгрузки;
	
	Если Не НастройкиПоТипуСообщения.СинхронныйРежим
		Или НастройкиПоТипуСообщения.ЕстьВОчереди Тогда
		
		НаборЗаписей = РегистрыСведений.EUF_ПроводникОчередьИсходящих.СоздатьНаборЗаписей();		
		НаборЗаписей.Отбор.ИсходящееСообщение.Установить(ИсходящееСообщение);
		НаборЗаписей.Прочитать();		
		Если НаборЗаписей.Количество() Тогда			
			ЗаписьОчереди = НаборЗаписей[0];
			ЗаписьОчереди.ЕстьОшибки = Ложь;
			ЗаписьОчереди.Комментарий = ТекстИнформации;
			ЗаписьОчереди.СостояниеОчереди = СостояниеОстановки;
			ЗаписьОчереди.ДоступноДляОбработки = Ложь;
			НаборЗаписей.Записать();			
		КонецЕсли;
	КонецЕсли;
		
	ОбИсходящееСообщение = ИсходящееСообщение.ПолучитьОбъект();
	ОбИсходящееСообщение.СостояниеСообщения = СостояниеОстановки;		
	ОбИсходящееСообщение.Комментарий = ТекстИнформации;
	ОбИсходящееСообщение.Записать();
	
	// Установим признак  для остановки дальнейшей обработки
	НастройкиПоТипуСообщения.Вставить("БезВыгрузки", Истина);
	
	EUF_ПроводникВызовСервера.ВыполнитьЛогирование("Выгрузка сообщения во внешнюю систему",
					УровеньЖурналаРегистрации.Информация, ТекстИнформации,
					НастройкиПоТипуСообщения.ТипИсходящегоСообщения, Истина, ИсходящееСообщение);
					
КонецПроцедуры

Процедура ЗафиксироватьОшибкуИсходящего(ТекстОшибки, ИсходящееСообщение, Заголовок, ВыборкаДанных) Экспорт
	
	ИзрасходованоПопыток = ВыборкаДанных.ИзрасходованоПопыток + 1;
	
	ОбСообщение = ИсходящееСообщение.ПолучитьОбъект();
	ОбСообщение.Комментарий = ТекстОшибки;
	ОбСообщение.ЕстьОшибки	= Истина;	
	ОбСообщение.СчетчикПопытокОбработки = ИзрасходованоПопыток;
	ОбСообщение.Записать();
	
	НаборЗаписей = РегистрыСведений.EUF_ПроводникОчередьИсходящих.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.ИсходящееСообщение.Установить(ИсходящееСообщение);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда
		
		НеИсключать = ВыборкаДанных.ДоступноПопытокОбработки - ИзрасходованоПопыток > 0; 
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ЕстьОшибки	= Истина;
			Запись.Комментарий	= ТекстОшибки;
			Запись.ДоступноДляОбработки = НеИсключать;
		КонецЦикла;	
		
		НаборЗаписей.Записать();
		
	КонецЕсли; 
						
	EUF_ПроводникВызовСервера.ВыполнитьЛогирование(Заголовок,
					УровеньЖурналаРегистрации.Ошибка, ТекстОшибки,
					ИсходящееСообщение, Истина, ИсходящееСообщение);				
					
	Если ВыборкаДанных.РежимОтладки Тогда
		EUF_ПроводникШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;				
					
КонецПроцедуры

// Используется экземплярами регламентного задания "EUF_ПроводникПодготовкаИсходящих" по настройкам
//  для каждой внешней системы. Обрабатывает зарегистрированные сообщения в
//  очереди исходящих сообщений (преобразование в формат транспорта, смена статуса)
//                                                                                 
// Параметры:
//  ВнешняяСистема	- ПланОбменаСсылка.EUF_ПроводникВнешниеСистемы - Разрез по внешней системе
//	ИДРеглЗадания	- Строка - Идентификатор регламентного задания
//
Процедура ПодготовкаИсходящихСообщенийРеглЗаданием(ВнешняяСистема, ИДРеглЗадания) Экспорт
	
	РеглЗадание = Метаданные.РегламентныеЗадания.EUF_ПроводникПодготовкаИсходящих;
	Доступно = EUF_ПроводникОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РеглЗадание,
														ИДРеглЗадания, ВнешняяСистема);
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли;
	                             	 	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьИсходящих.ВнешняяСистема КАК ВнешняяСистема,
	|	ОчередьИсходящих.ИсходящееСообщение КАК ИсходящееСообщение,
	|	ОчередьИсходящих.УникальноеВремяРегистрации КАК УникальноеВремяРегистрации,
	|	ОчередьИсходящих.ТипСообщения КАК ТипИсходящегоСообщения,
	|	ИСТИНА КАК ЕстьВОчереди
	|ПОМЕСТИТЬ ПулИсходящих
	|ИЗ
	|	РегистрСведений.EUF_ПроводникОчередьИсходящих КАК ОчередьИсходящих
	|ГДЕ
	|	ОчередьИсходящих.ДоступноДляОбработки = ИСТИНА
	|	И ОчередьИсходящих.СостояниеОчереди = &СостояниеОчереди
	|	И ОчередьИсходящих.ЕстьОшибки = ЛОЖЬ
	|	И ОчередьИсходящих.ВнешняяСистема = &ВнешняяСистема
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьИсходящих.ВнешняяСистема,
	|	ОчередьИсходящих.ИсходящееСообщение,
	|	ОчередьИсходящих.УникальноеВремяРегистрации,
	|	ОчередьИсходящих.ТипСообщения,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.EUF_ПроводникОчередьИсходящих КАК ОчередьИсходящих
	|ГДЕ
	|	ОчередьИсходящих.ДоступноДляОбработки = ИСТИНА
	|	И ОчередьИсходящих.СостояниеОчереди = &СостояниеОчереди
	|	И ОчередьИсходящих.ЕстьОшибки = ИСТИНА
	|	И ОчередьИсходящих.ВнешняяСистема = &ВнешняяСистема
	|
	|УПОРЯДОЧИТЬ ПО
	|	УникальноеВремяРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПулИсходящих.ТипИсходящегоСообщения КАК ТипИсходящегоСообщения
	|ПОМЕСТИТЬ ТипыСообщений
	|ИЗ
	|	ПулИсходящих КАК ПулИсходящих
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипИсходящегоСообщения"
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"	
	+ ТекстЗапросаИсходящихСНастройкамиОбработки();
	
	Запрос.УстановитьПараметр("СостояниеОчереди", Перечисления.EUF_ПроводникСостоянияИсходящих.Зарегистрировано);
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	
	// Параметры для ручного режима
	Запрос.УстановитьПараметр("КонкретныйТипСообщения", Неопределено);
	Запрос.УстановитьПараметр("КонкретнаяНастройка", Неопределено);
	Запрос.УстановитьПараметр("РежимОтладки", Ложь);
	
	// ──────────────────────────────
	// Определяем количество выборки
	ПараметрыВнешнейСистемы = "КоличествоОбрабатываемыхИсходящихБезОшибок, КоличествоОбрабатываемыхИсходящихСОшибками";
	СтруктураРеквизитов = EUF_ПроводникШлюзБСПСервер.ЗначенияРеквизитовОбъекта(ВнешняяСистема, ПараметрыВнешнейСистемы);
	ВыбираемыеЗаписиБезОшибок = Макс(1, СтруктураРеквизитов.КоличествоОбрабатываемыхИсходящихБезОшибок);
	ВыбираемыеЗаписиСОшибками = Макс(1, СтруктураРеквизитов.КоличествоОбрабатываемыхИсходящихСОшибками);
		
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	НомерПакета = 0;
	СхемаЗапроса.ПакетЗапросов[НомерПакета].Операторы[0].КоличествоПолучаемыхЗаписей = ВыбираемыеЗаписиБезОшибок;
	СхемаЗапроса.ПакетЗапросов[НомерПакета].Операторы[1].КоличествоПолучаемыхЗаписей = ВыбираемыеЗаписиСОшибками;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();	
	// ────────────────────────────── 
	
	Запрос.Текст = ТекстЗапроса; 
	
	ОбработкаИсходящихСообщений(Запрос);	      	
	
КонецПроцедуры

// Функция обработки исходящих сообщений
//
// Параметры:
//  Запрос				 - Запрос	 - Запрос с определенной структурой, обеспечивающий выборку сообщений с настройками
//  КонкретныйОбработчик - ВнешняяОбработка - Передается обработчик, обычно из формы отладки внешней обработки.
//										При указании будут использоваться его функции модуля объекта. 
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый ответ от внешней системы или результат обработки
//
Функция ОбработкаИсходящихСообщений(Запрос, КонкретныйОбработчик = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
		
	НастройкиПоТипуСообщения = ИнициализироватьПараметрыИсходящих();
	ЗаголовокОшибки = "Ошибка подготовки исходящего сообщения к выгрузке";
		
	Пока Выборка.Следующий() Цикл 		
					
		Если Не ЗначениеЗаполнено(Выборка.НастройкаСсылка) Тогда
							
			ТекстОшибки = "Не определены настройки для типа сообщения " + Строка(Выборка.ТипИсходящегоСообщения);			
			ЗафиксироватьОшибкуИсходящего(ТекстОшибки, Выборка.ИсходящееСообщение, ЗаголовокОшибки, Выборка);
			Если Выборка.РежимОтладки Тогда
				EUF_ПроводникШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;	
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НастройкиПоТипуСообщения, Выборка);
		НастройкиПоТипуСообщения.Вставить("КонкретныйОбработчик", КонкретныйОбработчик); 
		
		Попытка
			Результат = ОбработатьИсходящееСообщение(Выборка.ИсходящееСообщение, НастройкиПоТипуСообщения);			
		Исключение
			ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = "Не удалось подготовить исходящее сообщение к отправке. "  + Символы.ПС + ИнформацияОбОшибке;
			ЗафиксироватьОшибкуИсходящего(ТекстОшибки, Выборка.ИсходящееСообщение, ЗаголовокОшибки, Выборка);
			Результат.Вставить(Выборка.ИсходящееСообщение, ТекстОшибки);
			Если Выборка.РежимОтладки Тогда
				EUF_ПроводникШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецПопытки;	
				
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции

Функция ОбработатьИсходящееСообщение(ИсходящееСообщение, НастройкиПоТипуСообщения, Отказ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураРезультат = СформироватьСообщениеВФорматеТранспорта(ИсходящееСообщение, НастройкиПоТипуСообщения);
	ДанныеВФорматеТранспорта = СтруктураРезультат.ДанныеВФорматеТранспорта;
	ОписаниеФормата = СтруктураРезультат.ОписаниеФормата;
	
	Если ДанныеВФорматеТранспорта <> Неопределено Тогда		
		ЗаписатьДанныеОбменаВХранилище(ИсходящееСообщение, ДанныеВФорматеТранспорта, ОписаниеФормата);		
	КонецЕсли;
	
	ЗафиксироватьОбработкуИсходящего(ИсходящееСообщение, НастройкиПоТипуСообщения);
	
	Если НастройкиПоТипуСообщения.СинхронныйРежим Тогда
		
		ОтветОтВнешнейСистемы = ОтправитьОдноСообщение(ИсходящееСообщение, 
							НастройкиПоТипуСообщения.ВнешняяСистема, НастройкиПоТипуСообщения.РежимОтладки);
		
	КонецЕсли;  	
	
	Если НастройкиПоТипуСообщения.ВозвращатьОтветВИнтерфейс Тогда
		Возврат ОтветОтВнешнейСистемы;
	Иначе	
		Возврат СтруктураРезультат;
	КонецЕсли;	
	
КонецФункции

Функция СформироватьСообщениеВФорматеТранспорта(ИсходящееСообщение, НастройкиПоТипуСообщения) Экспорт
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ДанныеВФорматеТранспорта"); 
	
	Если НастройкиПоТипуСообщения.СпособФормирования =
		Перечисления.EUF_ПроводникСпособыПреобразованияСообщений.ПроизвольныйАлгоритм Тогда	
		
		СтруктураРезультат = ПреобразоватьВФорматТранспортаОбработчиком(ИсходящееСообщение, НастройкиПоТипуСообщения);
		
	Иначе                 
		ТекстОшибки = "Не определен способ формирования сообщения!";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не СтруктураРезультат.Свойство("ОписаниеФормата") Тогда
		СтруктураРезультат.Вставить("ОписаниеФормата", "");
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ПреобразоватьВФорматТранспортаОбработчиком(ИсходящееСообщение, Знач НастройкиПоТипуСообщения)
	
	// В исполняемом коде подготовленные данные должны быть помещены в
	// элемент структуры "СтруктураРезультат.ДанныеВФорматеТранспорта"
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ДанныеВФорматеТранспорта");
	СтруктураРезультат.Вставить("ОписаниеФормата", "");
		
	НастройкаСсылка = НастройкиПоТипуСообщения.НастройкаСсылка;
	СтрРеквизитыОбработчика = "ВариантПроизвольногоОбработчика,
								|КодФормированияСообщения,
								|ИмяВстроенногоОбработчика,
								|ОбработкаФормированияИсходящего";
	РеквизитыОбработчика = EUF_ПроводникНаВремяВызоваПовтИсп.РеквизитыНастроекСообщений(НастройкаСсылка,
																	СтрРеквизитыОбработчика);
	ВариантОбработчика = РеквизитыОбработчика.ВариантПроизвольногоОбработчика;
	НастройкиПоТипуСообщения.Вставить("ВариантОбработчика", ВариантОбработчика); // Для условий в модуле обработки
	
	ИспользуетсяКонкретныйОбработчик = НастройкиПоТипуСообщения.Свойство("КонкретныйОбработчик")
			И НастройкиПоТипуСообщения.КонкретныйОбработчик <> Неопределено;
			
	Если ИспользуетсяКонкретныйОбработчик Тогда
		
		ОбработкаОбъект = НастройкиПоТипуСообщения.КонкретныйОбработчик;
		
	ИначеЕсли ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ПодключаемыйОбработчик
		Тогда
		
		ПодключаемаяОбработка = РеквизитыОбработчика.ОбработкаФормированияИсходящего;
		ОбработкаОбъект = EUF_ПроводникШлюзБСПСервер.ОбъектВнешнейОбработки(ПодключаемаяОбработка);
		
	ИначеЕсли ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ВстроенныйОбработчик 
		Тогда	
		
		ОбработкаОбъект = Обработки[РеквизитыОбработчика.ИмяВстроенногоОбработчика].Создать();
	ИначеЕсли ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ОпределяетсяВнеПодсистемы 
		Тогда
		// Считаем, что преобразование уже выполнено и записано в регистр данных транспорта
		Возврат СтруктураРезультат;
	Иначе
		ОбработкаОбъект = Неопределено; 		
	КонецЕсли; 
	
	// Выполнение кода
	Попытка	
		Если ИспользуетсяКонкретныйОбработчик 
			Или ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ПодключаемыйОбработчик
			Или ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ВстроенныйОбработчик
			Тогда
		 	СтруктураРезультат = ОбработкаОбъект.ВыполнитьОбработчикОбмена(ИсходящееСообщение, НастройкиПоТипуСообщения);			
			
		ИначеЕсли ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ПроизвольныйКод Тогда
			
			ИсполняемыйКод = РеквизитыОбработчика.КодФормированияСообщения;
			УстановитьБезопасныйРежим(Истина);
			Выполнить(ИсполняемыйКод); 
			 
		Иначе
			ВызватьИсключение "Неизвестный вариант произвольного обработчика. ";
		КонецЕсли;	
	Исключение
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон("Ошибка выполнения кода формирования тела сообщения %1 %2",
								Символы.ПС, ОписаниеОшибки);
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Возврат СтруктураРезультат;
	
КонецФункции 

// Используется экземплярами регламентного задания "EUF_ПроводникОтправкаИсходящих" по настройкам
// для каждой внешней системы
//
// Параметры:
//  ВнешняяСистема	- ПланОбменаСсылка.EUF_ПроводникВнешниеСистемы - Разрез по внешней системе
//	ИДРеглЗадания	- Строка - Идентификатор регламентного задания
//
Процедура ВыгрузитьСообщенияВоВнешнююСистемуРеглЗаданием(ВнешняяСистема, ИДРеглЗадания) Экспорт
	
	РеглЗадание = Метаданные.РегламентныеЗадания.EUF_ПроводникОтправкаИсходящих;
	Доступно = EUF_ПроводникОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РеглЗадание,
														ИДРеглЗадания, ВнешняяСистема);
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьИсходящих.ВнешняяСистема КАК ВнешняяСистема,
	|	ОчередьИсходящих.ВнешняяСистема.ПараметрыПодключения КАК ПараметрыПодключенияСсылка,
	|	ОчередьИсходящих.ТипСообщения КАК ТипИсходящегоСообщения,
	|	ОчередьИсходящих.ИсходящееСообщение КАК ИсходящееСообщение,
	|	ОчередьИсходящих.УникальноеВремяРегистрации КАК УникальноеВремяРегистрации,
	|	ИСТИНА КАК ЕстьВОчереди
	|ПОМЕСТИТЬ ПулИсходящих
	|ИЗ
	|	РегистрСведений.EUF_ПроводникОчередьИсходящих КАК ОчередьИсходящих
	|ГДЕ
	|	ОчередьИсходящих.ДоступноДляОбработки = ИСТИНА
	|	И ОчередьИсходящих.СостояниеОчереди = ЗНАЧЕНИЕ(Перечисление.EUF_ПроводникСостоянияИсходящих.ОжидаетОтправки)
	|	И ОчередьИсходящих.ЕстьОшибки = ЛОЖЬ
	|	И ОчередьИсходящих.ВнешняяСистема = &ВнешняяСистема
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьИсходящих.ВнешняяСистема,
	|	ОчередьИсходящих.ВнешняяСистема.ПараметрыПодключения,
	|	ОчередьИсходящих.ТипСообщения,
	|	ОчередьИсходящих.ИсходящееСообщение,
	|	ОчередьИсходящих.УникальноеВремяРегистрации,
	|	ИСТИНА КАК ЕстьВОчереди
	|ИЗ
	|	РегистрСведений.EUF_ПроводникОчередьИсходящих КАК ОчередьИсходящих
	|ГДЕ
	|	ОчередьИсходящих.ДоступноДляОбработки = ИСТИНА
	|	И ОчередьИсходящих.СостояниеОчереди = ЗНАЧЕНИЕ(Перечисление.EUF_ПроводникСостоянияИсходящих.ОжидаетОтправки)
	|	И ОчередьИсходящих.ЕстьОшибки = ИСТИНА
	|	И ОчередьИсходящих.ВнешняяСистема = &ВнешняяСистема
	|
	|УПОРЯДОЧИТЬ ПО
	|	УникальноеВремяРегистрации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипИсходящегоСообщения,
	|	ИсходящееСообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПулИсходящих.ТипИсходящегоСообщения КАК ТипИсходящегоСообщения
	|ПОМЕСТИТЬ ТипыСообщений
	|ИЗ
	|	ПулИсходящих КАК ПулИсходящих"
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"	
	+ ТекстЗапросаИсходящихСНастройкамиВыгрузки();
	
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);	
	Запрос.УстановитьПараметр("РежимОтладки", 	Ложь);
	Запрос.УстановитьПараметр("КонкретныйТипСообщения", Неопределено);
	Запрос.УстановитьПараметр("КонкретнаяНастройка", Неопределено);
	
	ТекущийУзел = ПланыОбмена.EUF_ПроводникВнешниеСистемы.ЭтотУзел();
	Запрос.УстановитьПараметр("ТекущийУзел",  ТекущийУзел);	
	
	// ──────────────────────────────
	// Определяем количество выборки
	ПараметрыВнешнейСистемы = "КоличествоВыгружаемыхИсходящихБезОшибок, КоличествоВыгружаемыхИсходящихСОшибками";
	СтруктураРеквизитов = EUF_ПроводникШлюзБСПСервер.ЗначенияРеквизитовОбъекта(ВнешняяСистема, ПараметрыВнешнейСистемы);
	ВыбираемыеЗаписиБезОшибок = Макс(1, СтруктураРеквизитов.КоличествоВыгружаемыхИсходящихБезОшибок);
	ВыбираемыеЗаписиСОшибками = Макс(1, СтруктураРеквизитов.КоличествоВыгружаемыхИсходящихСОшибками);
		
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	НомерПакета = 0;
	СхемаЗапроса.ПакетЗапросов[НомерПакета].Операторы[0].КоличествоПолучаемыхЗаписей = ВыбираемыеЗаписиБезОшибок;
	СхемаЗапроса.ПакетЗапросов[НомерПакета].Операторы[1].КоличествоПолучаемыхЗаписей = ВыбираемыеЗаписиСОшибками;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();	
	// ──────────────────────────────
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыгрузитьСообщенияВоВнешнююСистему(Запрос, ВнешняяСистема);
	
КонецПроцедуры

Функция ВыгрузитьСообщенияВоВнешнююСистему(Запрос, ВнешняяСистема) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтветыОтВнешнейСистемы = Новый Соответствие;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаВариантовПодключений = РезультатыЗапроса[4].Выгрузить();
	
	Если Не ТаблицаВариантовПодключений.Количество() И Не РезультатыЗапроса[5].Пустой() Тогда
		ТекстОшибки = "Не определен ни один параметр подключения к внешним системам для исходящего пула сообщений";
		EUF_ПроводникВызовСервера.ВыполнитьЛогирование("Не определены параметры подключения для отправки",
						УровеньЖурналаРегистрации.Ошибка, ТекстОшибки,
						ВнешняяСистема, Истина);
		ВызватьИсключение ТекстОшибки;				
	КонецЕсли;					
	
	ТаблицаВариантовПодключений.Колонки.Добавить("Информация", Новый ОписаниеТипов("Строка"));
	ТаблицаВариантовПодключений.Индексы.Добавить("ПараметрыПодключенияСсылка, ИнтерфейсТранспорта");
	
	Для Каждого ВариантПодключения Из ТаблицаВариантовПодключений Цикл
		Попытка
			ВариантПодключения.Коннектор = ПолучитьСоединениеСВнешнейСистемой(ВариантПодключения.ПараметрыПодключенияСсылка,
													ВариантПодключения.ИнтерфейсТранспорта);
		Исключение
			ИнформацияПоОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВариантПодключения.Информация = ИнформацияПоОшибке;
		КонецПопытки;	
	КонецЦикла;
	СтруктураПоискаКоннектора = Новый Структура("ПараметрыПодключенияСсылка, ИнтерфейсТранспорта");						
											
	ПараметрыВыгрузкиИсходящих = ИнициализироватьПараметрыИсходящих();
	
	Выборка = РезультатыЗапроса[5].Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		ИсходящееСообщение = Выборка.ИсходящееСообщение;
		ЗаполнитьЗначенияСвойств(ПараметрыВыгрузкиИсходящих, Выборка);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаКоннектора, Выборка);
		НайденныеСтроки = ТаблицаВариантовПодключений.НайтиСтроки(СтруктураПоискаКоннектора);		
		Коннектор = НайденныеСтроки[0].Коннектор;
		Если Коннектор = Неопределено Тогда
			ЗаголовокОшибки = "Ошибка подключения по параметрам ";
			ТекстОшибки = НайденныеСтроки[0].Информация;
			ЗафиксироватьОшибкуИсходящего(ТекстОшибки, ИсходящееСообщение, ЗаголовокОшибки, Выборка);
			
			Если Не ПараметрыВыгрузкиИсходящих.ИспользоватьТранспортОбработчика Тогда
				// Если правила отправки не определяются в подключаемом обработчике, то не выгружаем.
				// При использовании транспорта обработчика могут быть обработаны ошибки отправки сообщений.
				// Например, отправка уведомлений при исчерпаном количестве попыток.
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			// ┌──────────────────────────────
			// │ Ключевая (визуальный маркер) 
			//
			ОтветВнешнейСистемы = ОтправитьСообщениеВоВнешнююСистему(ИсходящееСообщение,
													ПараметрыВыгрузкиИсходящих, Коннектор);													
			//
			// └──────────────────────────────       
			
			// Пробрасываем ответ дальше если они необходимы в интерфейсе
			ОтветыОтВнешнейСистемы.Вставить(ИсходящееСообщение, ОтветВнешнейСистемы); 
						
		Исключение
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаголовокОшибки = "Ошибка выгрузки сообщения";
			ЗафиксироватьОшибкуИсходящего(ТекстОшибки, ИсходящееСообщение, ЗаголовокОшибки, Выборка);
			ОтветыОтВнешнейСистемы.Вставить(ИсходящееСообщение, ТекстОшибки);
			Продолжить;	
			
		КонецПопытки;
		
	КонецЦикла; 	

	Коннектор = Неопределено;   
	
	Возврат ОтветыОтВнешнейСистемы;
	
КонецФункции

Функция ОтправитьСообщениеВоВнешнююСистему(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих, Коннектор) Экспорт
			
	ОтветВнешнейСистемы = "";
	
	// ┌──────────────────────────────
	// │ Ключевая (визуальный маркер) 
	//
	ВыполнитьОбработчикиПриОтправке(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих, "ПЕРЕД");
	// 
	// └──────────────────────────────
		
	СжиматьВZip = ПараметрыВыгрузкиИсходящих.СжиматьВZip;
	BodyType = ПараметрыВыгрузкиИсходящих.ОписаниеФормата;
	MsgBody = "";
	
	Если ПараметрыВыгрузкиИсходящих.ДанныеВФорматеТранспорта <> Неопределено Тогда
		ДанныеВФорматеТранспорта = ПараметрыВыгрузкиИсходящих.ДанныеВФорматеТранспорта.Получить();
		СтрокаBase64 = EUF_ПроводникОбщегоНазначения.ДанныеВСтрокуBase64(ДанныеВФорматеТранспорта, СжиматьВZip);
		MsgBody = СтрокаBase64;	
	КонецЕсли;

	ПараметрыТранспорта = Новый Структура;
	ПараметрыТранспорта.Вставить("MsgType", ПараметрыВыгрузкиИсходящих.ТехническоеИмя);
	ПараметрыТранспорта.Вставить("MsgID", ПараметрыВыгрузкиИсходящих.ИдентификаторСообщения);
	ПараметрыТранспорта.Вставить("BodyType", BodyType);
	ПараметрыТранспорта.Вставить("ExternalSystemID", ПараметрыВыгрузкиИсходящих.ИдентификаторВнешнейСистемы);
	ПараметрыТранспорта.Вставить("IntegrationProcessID", ПараметрыВыгрузкиИсходящих.ИдентификаторПроцесса);
	ПараметрыТранспорта.Вставить("MsgBody", MsgBody);
	
	// При асинхронном режиме ожидаем по умолчанию получить ответ строкой "200".
	// Если требуется обработка ответа при асинхронном режиме, тогда ответ может быть произвольным.
	ОтветВнешнейСистемы = ОтветОтВнешнейСистемы(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих,
														Коннектор, ПараметрыТранспорта);		
														
	Если ПараметрыВыгрузкиИсходящих.ВозвращатьОтветВИнтерфейс Тогда
		
		ЗафиксироватьВыгрузкуИсходящего(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих);
		
	ИначеЕсли ПараметрыВыгрузкиИсходящих.ОбрабатыватьРезультатЗапроса Тогда
		// Не выполняем пост обработчик в текущем случае, т.к. логика пост обработки
		// определяется настройками по типу входящего (в том числе синхронная обработка)
		
		ПараметрыТранспортаВходящего = НовыйПараметрыТранспортаВходящего();
		ПараметрыТранспортаВходящего.ВнешняяСистема = ПараметрыВыгрузкиИсходящих.ВнешняяСистема;
		ПараметрыТранспортаВходящего.ВходящиеДанные = ОтветВнешнейСистемы;
			
		РезультатЗапроса = ЗарегистрироватьВходящее(ПараметрыВыгрузкиИсходящих.ТипВходящегоДляОбработкиРезультата,
														ПараметрыТранспортаВходящего);
		Если РезультатЗапроса = "200" Тогда												
			ЗафиксироватьВыгрузкуИсходящего(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих);
		ИначеЕсли РезультатЗапроса = Неопределено Тогда
			ВызватьИсключение "Были ошибки при обработке исходящего сообщения " + Строка(ИсходящееСообщение);
		Иначе
			ВызватьИсключение ОтветВнешнейСистемы;		
		КонецЕсли;	
		
	Иначе	
		Если ОтветВнешнейСистемы = "200" Тогда
			// Стандартный ответ при использовании текущей подсистемы во внешней системе 
			
			// ┌──────────────────────────────
			// │ Ключевая (визуальный маркер) 
			//
			Если Не ПараметрыВыгрузкиИсходящих.СинхронныйРежим Тогда
				ПараметрыВыгрузкиИсходящих.Вставить("ОтветВнешнейСистемы", ОтветВнешнейСистемы);
				ВыполнитьОбработчикиПриОтправке(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих, "ПОСТ");
			КонецЕсли;
			// 
			// └──────────────────────────────
			
			ЗафиксироватьВыгрузкуИсходящего(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих);
			
		Иначе
			ВызватьИсключение ОтветВнешнейСистемы;		
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ОтветВнешнейСистемы;
		
КонецФункции

Функция ОтветОтВнешнейСистемы(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих, Коннектор, ПараметрыТранспорта)
		
	Если ПараметрыВыгрузкиИсходящих.ИспользоватьТранспортОбработчика Тогда 
		
		ОбработчикТранспорта = ОбработчикИсходящих(ПараметрыВыгрузкиИсходящих);
		ОтветВнешнейСистемы = ОбработчикТранспорта.ОтправкаВоВнешнююСистему(ИсходящееСообщение,
									ПараметрыВыгрузкиИсходящих, Коннектор, ПараметрыТранспорта);
									
	ИначеЕсли ПараметрыВыгрузкиИсходящих.ИнтерфейсТранспорта =
							Перечисления.EUF_ПроводникИнтерфейсыТранспорта.WebService Тогда
			
		ОтветВнешнейСистемы = ПередатьПоWebService(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих, Коннектор,
							ПараметрыТранспорта);
		
	ИначеЕсли ПараметрыВыгрузкиИсходящих.ИнтерфейсТранспорта =
							Перечисления.EUF_ПроводникИнтерфейсыТранспорта.HttpService Тогда
		
		ОтветВнешнейСистемы = ПередатьПоHTTP(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих, Коннектор,
							ПараметрыТранспорта);
		
	ИначеЕсли ПараметрыВыгрузкиИсходящих.ИнтерфейсТранспорта =
							Перечисления.EUF_ПроводникИнтерфейсыТранспорта.COM Тогда
		
		ОтветВнешнейСистемы = ПередатьПоCOM(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих, Коннектор,
							ПараметрыТранспорта);
		
	Иначе
		ТекстОшибки = "Не определен интерфейс транспорта. ";
		ВызватьИсключение ТекстОшибки;		
	КонецЕсли;
	
	Возврат ОтветВнешнейСистемы;
	
КонецФункции	

// Используется для отправки одного конкретного сообщения
//
// Параметры:
//  ИсходящееСообщение	 - СправочникСсылка.EUF_ПроводникСообщенияИсходящие - исходящее сообщение
//  ВнешняяСистема		 - ПланОбменаСсылка.EUF_ПроводникВнешниеСистемы	 - Разрез по внешней системе
//  РежимОтладки	 	 - Булево - используется для отладки, например для вывода сообщений
// 
// Возвращаемое значение:
//  Произвольный - Ответ от внешней системы
//
Функция ОтправитьОдноСообщение(ИсходящееСообщение, ВнешняяСистема = Неопределено, РежимОтладки = Ложь) Экспорт
	
	Если ВнешняяСистема = Неопределено Тогда
		Реквизиты = EUF_ПроводникШлюзБСПСервер.ЗначенияРеквизитовОбъекта(ИсходящееСообщение, "ВнешняяСистема");
		ВнешняяСистема = Реквизиты.ВнешняяСистема;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВнешниеСистемы.Ссылка КАК ВнешняяСистема,
	|	ВнешниеСистемы.ПараметрыПодключения КАК ПараметрыПодключенияСсылка,
	|	СообщенияИсходящие.Ссылка КАК ИсходящееСообщение,
	|	СообщенияИсходящие.УникальноеВремяСоздания КАК УникальноеВремяРегистрации,
	|	СообщенияИсходящие.ТипСообщения КАК ТипИсходящегоСообщения,
	|	ВЫБОР
	|		КОГДА ОчередьИсходящих.ИсходящееСообщение ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВОчереди
	|ПОМЕСТИТЬ ПулИсходящих
	|ИЗ
	|	Справочник.EUF_ПроводникСообщенияИсходящие КАК СообщенияИсходящие
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.EUF_ПроводникВнешниеСистемы КАК ВнешниеСистемы
	|		ПО (ВнешниеСистемы.Ссылка = &ВнешняяСистема)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.EUF_ПроводникОчередьИсходящих КАК ОчередьИсходящих
	|		ПО СообщенияИсходящие.Ссылка = ОчередьИсходящих.ИсходящееСообщение
	|ГДЕ
	|	СообщенияИсходящие.Ссылка = &ТекущееИсходящееСообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПулИсходящих.ТипИсходящегоСообщения КАК ТипИсходящегоСообщения
	|ПОМЕСТИТЬ ТипыСообщений
	|ИЗ
	|	ПулИсходящих КАК ПулИсходящих"
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ ТекстЗапросаИсходящихСНастройкамиВыгрузки();
	
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	Запрос.УстановитьПараметр("РежимОтладки", РежимОтладки);
	Запрос.УстановитьПараметр("ТекущийУзел",  ПланыОбмена.EUF_ПроводникВнешниеСистемы.ЭтотУзел());
	Запрос.УстановитьПараметр("КонкретныйТипСообщения", Неопределено);
	Запрос.УстановитьПараметр("ТекущееИсходящееСообщение", ИсходящееСообщение);
	Запрос.УстановитьПараметр("КонкретнаяНастройка", Неопределено);
	
	Запрос.Текст = ТекстЗапроса; 
	
	Результат = ВыгрузитьСообщенияВоВнешнююСистему(Запрос, ВнешняяСистема);
	Возврат Результат;
	
КонецФункции

Функция ПередатьПоWebService(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих, WSПрокси, ПараметрыТранспорта)
					
	MsgType = ПараметрыТранспорта.MsgType;
	MsgID = ПараметрыТранспорта.MsgID;  
	BodyType = ПараметрыТранспорта.BodyType;
	MsgBody = ПараметрыТранспорта.MsgBody;
	ExternalSystemID = ПараметрыТранспорта.ExternalSystemID;
	IntegrationProcessID = ПараметрыТранспорта.IntegrationProcessID;
	
	Результат = WSПрокси.Interaction(MsgType, MsgID, MsgBody, ExternalSystemID, IntegrationProcessID, BodyType);
	
	ЗаголовокЛогирования = "Выгрузка сообщения во внешнюю систему";
	ТекстЛогирования = СтрШаблон("Выполнен запрос (WebService). Имя точки подключения %1. Результат = %2 ",
							WSПрокси.ТочкаПодключения.Имя, Результат);
	
	EUF_ПроводникВызовСервера.ВыполнитьЛогирование(ЗаголовокЛогирования,
					УровеньЖурналаРегистрации.Информация, ТекстЛогирования,
					ИсходящееСообщение, Истина, ИсходящееСообщение);
					
	Возврат Результат;
	
КонецФункции

Функция ПередатьПоHTTP(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих, HTTPСоединение, ПараметрыТранспорта)
	
	MsgType = ПараметрыТранспорта.MsgType;
	MsgID = ПараметрыТранспорта.MsgID;  
	BodyType = ПараметрыТранспорта.BodyType;
	MsgBody = ПараметрыТранспорта.MsgBody;
	ExternalSystemID = ПараметрыТранспорта.ExternalSystemID;
	IntegrationProcessID = ПараметрыТранспорта.IntegrationProcessID;
	
	РесурсСПараметрами = ПараметрыВыгрузкиИсходящих.РесурсНаСервере
							+ "?MsgType="	+ MsgType
							+ "&MsgID=" 	+ MsgID
							+ "&BodyType=" 	+ BodyType
							+ "&ExternalSystemID=" 		+ ExternalSystemID
							+ "&IntegrationProcessID=" 	+ IntegrationProcessID;
		
	ЗаголовокHTTP = Новый Соответствие;    
	ЗаголовокHTTP.Вставить("Content-Type", "text/xml/json/csv; charset=utf-8");
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсСПараметрами, ЗаголовокHTTP);		
	HTTPЗапрос.УстановитьТелоИзСтроки(MsgBody, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	ПолученныйОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
		
	// Считаем, что в пределах двухсотых кодов нет ошибки
	КодУспех = 200;
	КодПроверкиСотых = 100;
	КодСостоянияОбщий = HTTPОтвет.КодСостояния - (HTTPОтвет.КодСостояния % КодПроверкиСотых);
	
	Если КодСостоянияОбщий <> КодУспех Тогда
		ТекстЛогирования = СтрШаблон("Код состояния %1. Полученный ответ = %2",
									HTTPОтвет.КодСостояния, ПолученныйОтвет);
		Возврат ТекстЛогирования;	 		
	КонецЕсли;
			
	ЗаголовокЛогирования = "Выгрузка сообщения во внешнюю систему";
	Шаблон = "Выполнен запрос (HttpService). Сервер %1. РесурсНаСервере %2. %3 Код состояния = %4. Ответ = %5";
	ТекстЛогирования = СтрШаблон(Шаблон, HTTPСоединение.Сервер, ПараметрыВыгрузкиИсходящих.РесурсНаСервере,
							Символы.ПС, HTTPОтвет.КодСостояния, ПолученныйОтвет);
	
	EUF_ПроводникВызовСервера.ВыполнитьЛогирование(ЗаголовокЛогирования,
					УровеньЖурналаРегистрации.Информация, ТекстЛогирования,
					ИсходящееСообщение, Истина, ИсходящееСообщение);
	 
	Возврат ПолученныйОтвет;
		
КонецФункции

Функция ПередатьПоCOM(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих, COMСоединение, ПараметрыТранспорта)
					
	MsgType = ПараметрыТранспорта.MsgType;
	MsgID = ПараметрыТранспорта.MsgID;  
	BodyType = ПараметрыТранспорта.BodyType;
	MsgBody = ПараметрыТранспорта.MsgBody;
	ExternalSystemID = ПараметрыТранспорта.ExternalSystemID;
	IntegrationProcessID = ПараметрыТранспорта.IntegrationProcessID;
	
	Результат = COMСоединение.EUF_ПроводникОбмен.ОбработатьВходящийЗапрос(MsgType, MsgID,
									MsgBody, ExternalSystemID, IntegrationProcessID, BodyType); 
									
	ЗаголовокЛогирования = "Выгрузка сообщения во внешнюю систему"; 
	ПредставлениеПодключения = Строка(ПараметрыВыгрузкиИсходящих.ПараметрыПодключенияСсылка);
	ТекстЛогирования = СтрШаблон("Выполнен запрос (COMСоединение). Параметры подключения: ""%1"". Результат = %2 ",
							ПредставлениеПодключения, Результат);
	
	EUF_ПроводникВызовСервера.ВыполнитьЛогирование(ЗаголовокЛогирования,
					УровеньЖурналаРегистрации.Информация, ТекстЛогирования,
					ИсходящееСообщение, Истина, ИсходящееСообщение);
					
	Возврат Результат;
		
КонецФункции

Процедура ВыполнитьОбработчикиПриОтправке(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих, Действие)
	
	Если Действие = "ПЕРЕД" И Не ПараметрыВыгрузкиИсходящих.ИспользоватьОбработчикПередОтправкой Тогда
		Возврат;
	КонецЕсли;
	
	Если Действие = "ПОСТ" И Не ПараметрыВыгрузкиИсходящих.ИспользоватьОбработчикПослеОтправки Тогда
		Возврат;
	КонецЕсли; 	
			
	НастройкаСсылка = ПараметрыВыгрузкиИсходящих.НастройкаСсылка;
	СтрРеквизитыОбработчика = "ВариантОбработчикаПриОтправке,
								|ИмяВстроенногоОбработчикаПриОтправке,
								|ОбработкаПриОтправке";
	РеквизитыОбработчика = EUF_ПроводникНаВремяВызоваПовтИсп.РеквизитыНастроекСообщений(НастройкаСсылка,
																				СтрРеквизитыОбработчика);
	ВариантОбработчика = РеквизитыОбработчика.ВариантОбработчикаПриОтправке;
	ПараметрыВыгрузкиИсходящих.Вставить("ВариантОбработчика", ВариантОбработчика); // Для условий в модуле обработки
				
	Если ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ПодключаемыйОбработчик
		Тогда
		
		ПодключаемаяОбработка = РеквизитыОбработчика.ОбработкаПриОтправке;
		ОбработкаОбъект = EUF_ПроводникШлюзБСПСервер.ОбъектВнешнейОбработки(ПодключаемаяОбработка);
		
	ИначеЕсли ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ВстроенныйОбработчик 
		Тогда	
		
		ОбработкаОбъект = Обработки[РеквизитыОбработчика.ИмяВстроенногоОбработчикаПриОтправке].Создать();
	Иначе	              
		ТекстОшибки = "Не определен вариант обработчика при отправке сообщения!";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Попытка
		Если Действие = "ПЕРЕД" Тогда 
			ОбработкаОбъект.ПередОтправкойИсходящегоСообщения(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих);
		ИначеЕсли Действие = "ПОСТ" Тогда 
			ОбработкаОбъект.ПослеОтправкиИсходящегоСообщения(ИсходящееСообщение, ПараметрыВыгрузкиИсходящих);
		Иначе	
			ВызватьИсключение "Порядок обработчика при выгрузки может быть только ""ПЕРЕД"" и ""ПОСТ""";	
		КонецЕсли;	
	Исключение 
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон("Ошибка выполнения кода пост обработчика после выгрузки сообщения %1 %2",
							Символы.ПС, ОписаниеОшибки);
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;  			
				
КонецПроцедуры 

Функция ОбработчикИсходящих(ПараметрыВыгрузкиИсходящих)
	
	НастройкаСсылка = ПараметрыВыгрузкиИсходящих.НастройкаСсылка;
	СтрРеквизитыОбработчика = "ВариантОбработчикаПриОтправке,
								|ИмяВстроенногоОбработчикаПриОтправке,
								|ОбработкаПриОтправке";
	РеквизитыОбработчика = EUF_ПроводникНаВремяВызоваПовтИсп.РеквизитыНастроекСообщений(НастройкаСсылка,
																				СтрРеквизитыОбработчика);
	ВариантОбработчика = РеквизитыОбработчика.ВариантОбработчикаПриОтправке;
	ПараметрыВыгрузкиИсходящих.Вставить("ВариантОбработчика", ВариантОбработчика); // Для условий в модуле обработки
				
	Если ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ПодключаемыйОбработчик
		Тогда
		
		ПодключаемаяОбработка = РеквизитыОбработчика.ОбработкаПриОтправке;
		ОбработкаОбъект = EUF_ПроводникШлюзБСПСервер.ОбъектВнешнейОбработки(ПодключаемаяОбработка);
		
	ИначеЕсли ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ВстроенныйОбработчик 
		Тогда	
		
		ОбработкаОбъект = Обработки[РеквизитыОбработчика.ИмяВстроенногоОбработчикаПриОтправке].Создать();
	Иначе	              
		ТекстОшибки = "Не определен вариант обработчика при отправке сообщения!";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции	

#КонецОбласти // ИсходящиеОбращения

#Область ВходящиеОбращения //**********************************************************

// Обработывается входящий запрос HTTP
//
// Параметры:
//  Запрос			 - HTTPЗапрос - Входящий запрос
//  HTTPСервисОтвет	 - HTTPСервисОтвет	 - Ответ на входящий запрос
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - HTTP сервис ответ 
//
Функция ОбработатьВходящийЗапросHTTP(Запрос, HTTPСервисОтвет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Читаем параметры
	ПараметрыЗапроса = Запрос.ПараметрыЗапроса;		
		
	ТехническийКодСообщения		= ПараметрыЗапроса.Получить("MsgType");
	ИдентификаторСообщенияВС	= ПараметрыЗапроса.Получить("MsgID");	
	ИдентификаторВнешнейСистемы	= ПараметрыЗапроса.Получить("ExternalSystemID");	
	ИдентификаторПроцесса		= ПараметрыЗапроса.Получить("IntegrationProcessID");
	ТипСодержимого				= ПараметрыЗапроса.Получить("BodyType");	
				
	ТекстВФорматеТранспорта = Запрос.ПолучитьТелоКакСтроку();
	Если ТекстВФорматеТранспорта = Неопределено Тогда
		ТекстПричины = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолныйТекстПричины = ИдентификаторВнешнейСистемы + Символы.ПС;
		EUF_ПроводникВызовСервера.ВыполнитьЛогирование("Входящий запрос", УровеньЖурналаРегистрации.Ошибка,
											ПолныйТекстПричины, , Истина);
											HTTPСервисОтвет.Причина = ТекстПричины;
		Возврат HTTPСервисОтвет;
	КонецЕсли;		
		
	Результат = ОбработатьВходящийЗапрос(ТехническийКодСообщения, ИдентификаторСообщенияВС, 
										ТекстВФорматеТранспорта,
										ИдентификаторВнешнейСистемы,
										ИдентификаторПроцесса,
										ТипСодержимого); 
										
	HTTPСервисОтвет.Заголовки.Вставить("Content-Type", "text/xml/json/csv; charset=utf-8");									
	HTTPСервисОтвет.УстановитьТелоИзСтроки(Результат, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат HTTPСервисОтвет;
	
КонецФункции

// Обрабатывает входящий запрос
//
// Параметры:
//  МнемокодСообщения		 - Строка - Мнемокод для опрееделния типа сообщения
//  ИдентификаторСообщенияВС - Строка - Идентификатор исходящего сообщения внешней системы (входящего для текущей)
//  ВходящиеДанные			 - Структура, ОбъектXDTO - Данные от внешней системы
//  ИдентификаторВнешнейСистемы	- Строка - Техническое имя внешней системы для дополнительной идентификации 
//  ИдентификаторПроцесса	 - Строка - Техническое имя элемента справочника "Интеграционные процессы" 
//  ТипСодержимого			 - Строка - Информация о содержимом (строка, двоичные данные)
// 
// Возвращаемое значение:
//  РезультатЗапроса - Строка (по умолчанию) с информацией о результате запроса
//
Функция ОбработатьВходящийЗапрос(МнемокодСообщения, ИдентификаторСообщенияВС,
										ВходящиеДанные,
										ИдентификаторВнешнейСистемы,
										ИдентификаторПроцесса,
										ТипСодержимого = "") Экспорт  
	УстановитьПривилегированныйРежим(Истина);									
										
	РезультатЗапроса = "200";
	ШаблонОтвета = "%1 %2 ";
	ИмяСобытия = "Входящий запрос";
	
	Если Не ЗначениеЗаполнено(МнемокодСообщения) Тогда
		ИнфоДляВнешнейСистемы = " Не задан тип входящего сообщения. ";
		EUF_ПроводникВызовСервера.ВыполнитьЛогирование(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
														ИнфоДляВнешнейСистемы, , Истина);
		Возврат СтрШаблон(ШаблонОтвета, ТекущаяДатаСеанса(), ИнфоДляВнешнейСистемы);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторСообщенияВС) Тогда
		ИнфоДляВнешнейСистемы = " Не указан идентификатор входящего сообщения. ";
		EUF_ПроводникВызовСервера.ВыполнитьЛогирование(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
														ИнфоДляВнешнейСистемы, , Истина);
		Возврат СтрШаблон(ШаблонОтвета, ТекущаяДатаСеанса(), ИнфоДляВнешнейСистемы);		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторВнешнейСистемы) Тогда
		ИнфоДляВнешнейСистемы = " Не указан идентификатор внешней системы. ";
		EUF_ПроводникВызовСервера.ВыполнитьЛогирование(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
														ИнфоДляВнешнейСистемы, , Истина);
		Возврат СтрШаблон(ШаблонОтвета, ТекущаяДатаСеанса(), ИнфоДляВнешнейСистемы);
	КонецЕсли;
			
	ВнешняяСистема = ПланыОбмена.EUF_ПроводникВнешниеСистемы.НайтиПоКоду(ИдентификаторВнешнейСистемы);
	Если Не ЗначениеЗаполнено(ВнешняяСистема) Тогда
		ИнфоДляВнешнейСистемы = " Не удалось определить внешнюю систему по идентификатору " + ИдентификаторВнешнейСистемы;
		EUF_ПроводникВызовСервера.ВыполнитьЛогирование(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
														ИнфоДляВнешнейСистемы, , Истина);
		Возврат СтрШаблон(ШаблонОтвета, ТекущаяДатаСеанса(), ИнфоДляВнешнейСистемы);
	КонецЕсли;	
	
	// Проверка пользователя (безопасность)
	ТекущийПользователь = EUF_ПроводникШлюзБСПСервер.АвторизованныйПользователь();
	Если Не EUF_ПроводникПовтИсп.СверитьПользователяВнешнейСистемы(ВнешняяСистема, ТекущийПользователь) Тогда
		ИнфоДляВнешнейСистемы = " Пользователь соединения (" + Строка(ТекущийПользователь)
								+ ") не соответствует пользователю указанного для внешней системы";
		EUF_ПроводникВызовСервера.ВыполнитьЛогирование(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
														ИнфоДляВнешнейСистемы, , Истина);
		Возврат СтрШаблон(ШаблонОтвета, ТекущаяДатаСеанса(), ИнфоДляВнешнейСистемы);
    КонецЕсли;
	
	ТипВходящегоСообщения = EUF_ПроводникПовтИсп.ОпределитьТипВходящегоСообщения(МнемокодСообщения, ВнешняяСистема);
	Если Не ЗначениеЗаполнено(ТипВходящегоСообщения) Тогда
		ИнфоДляВнешнейСистемы = " Не удалось найти тип входящего сообщения во внешней системе. Мнемокoд = "
								+ МнемокодСообщения;
		EUF_ПроводникВызовСервера.ВыполнитьЛогирование(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
														ИнфоДляВнешнейСистемы, , Истина);
		Возврат СтрШаблон(ШаблонОтвета, ТекущаяДатаСеанса(), ИнфоДляВнешнейСистемы);
	КонецЕсли;
	
	ПараметрыТранспортаВходящего = НовыйПараметрыТранспортаВходящего();
	ПараметрыТранспортаВходящего.ВнешняяСистема = ВнешняяСистема;
	ПараметрыТранспортаВходящего.ИдентификаторСообщенияВС = ИдентификаторСообщенияВС;
	ПараметрыТранспортаВходящего.ВходящиеДанные = ВходящиеДанные;
	ПараметрыТранспортаВходящего.ИдентификаторВнешнейСистемы = ИдентификаторВнешнейСистемы;
	ПараметрыТранспортаВходящего.ИдентификаторПроцесса = ИдентификаторПроцесса;
	ПараметрыТранспортаВходящего.ТипСодержимого = ТипСодержимого;
	
	РезультатЗапроса = ЗарегистрироватьВходящее(ТипВходящегоСообщения, ПараметрыТранспортаВходящего);		
	
	Возврат РезультатЗапроса;
	
КонецФункции 

Функция НовыйПараметрыТранспортаВходящего() Экспорт
	
	ПараметрыТранспортаВходящего = Новый Структура;  
	
	ПараметрыТранспортаВходящего.Вставить("ВнешняяСистема", Неопределено);
	ПараметрыТранспортаВходящего.Вставить("ИдентификаторСообщенияВС", "");	
	ПараметрыТранспортаВходящего.Вставить("ВходящиеДанные", "");
	ПараметрыТранспортаВходящего.Вставить("ИдентификаторВнешнейСистемы", "");
	ПараметрыТранспортаВходящего.Вставить("ИдентификаторПроцесса", "");
	ПараметрыТранспортаВходящего.Вставить("ТипСодержимого", ""); 
	
	Возврат ПараметрыТранспортаВходящего;
	
КонецФункции	

Функция ЗарегистрироватьВходящее(ТипВходящегоСообщения, ПараметрыТранспортаВходящего) Экспорт
	
	Результат = "200";
	
	ВнешняяСистема = ПараметрыТранспортаВходящего.ВнешняяСистема;
	ИдентификаторСообщенияВС = ПараметрыТранспортаВходящего.ИдентификаторСообщенияВС;
	ВходящиеДанные = ПараметрыТранспортаВходящего.ВходящиеДанные; 
	ИдентификаторПроцесса = ПараметрыТранспортаВходящего.ИдентификаторПроцесса;
	ТипСодержимого = ПараметрыТранспортаВходящего.ТипСодержимого;
	
	ПараметрыОбмена = Новый Структура;
	// Фиксируем уникальное время для очереди до выполнения последующих процедур и функций
	ПараметрыОбмена.Вставить("УникальноеВремяРегистрации", ТекущаяУниверсальнаяДатаВМиллисекундах());
		
	 // Получение настроек типа сообщения	
	НастройкиДляВходящего = ПолучитьНастройкиВходящего(ТипВходящегоСообщения);	
	Если Не ЗначениеЗаполнено(НастройкиДляВходящего.НастройкаСсылка) Тогда
		ИнфоДляВнешнейСистемы = " Не удалось определить настройки для входящего сообщения во внешней системе.";
		EUF_ПроводникВызовСервера.ВыполнитьЛогирование("Входящий запрос", УровеньЖурналаРегистрации.Ошибка,
														ИнфоДляВнешнейСистемы, , Истина);
		Возврат СтрШаблон("%1 %2 ", ТекущаяДатаСеанса(), ИнфоДляВнешнейСистемы);
	КонецЕсли;
	
	НастройкиДляВходящего.Вставить("ИдентификаторСообщенияВС", ИдентификаторСообщенияВС);
		
	ПараметрыОбмена.Вставить("ТипВходящегоСообщения", 	 ТипВходящегоСообщения);
	ПараметрыОбмена.Вставить("ВходящиеДанные", 			 ВходящиеДанные);
	ПараметрыОбмена.Вставить("ТипСодержимого", 			 ТипСодержимого); 
	
	ШаблонОшибки = "%1 %2 %3 %4";
	
	// Создание входящего сообщения 
	Попытка		
		ВходящееСообщение = СоздатьВходящееСообщение(НастройкиДляВходящего, ПараметрыОбмена);			
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаголовокОшибки = "Ошибка создания сообщения входящего";
		EUF_ПроводникВызовСервера.ВыполнитьЛогирование(ЗаголовокОшибки, УровеньЖурналаРегистрации.Ошибка, ТекстОшибки,
									ТипВходящегоСообщения, Истина);		
		Возврат СтрШаблон(ШаблонОшибки, ТекущаяДатаСеанса(), ЗаголовокОшибки, Символы.ПС, ТекстОшибки);
	КонецПопытки;
	
	ПараметрыОбмена.Вставить("ВнешняяСистема", 			 ВнешняяСистема);
	ПараметрыОбмена.Вставить("ВходящееСообщение", 		 ВходящееСообщение);	
	ПараметрыОбмена.Вставить("ИдентификаторСообщенияВС", ИдентификаторСообщенияВС);
	ПараметрыОбмена.Вставить("ИдентификаторПроцесса", 	 ИдентификаторПроцесса);
			
	Если НастройкиДляВходящего.СинхронныйРежим Тогда
		НастройкиДляВходящего.Вставить("ДанныеВФорматеТранспорта", ВходящиеДанные);
		Попытка
			Результат = ОбработатьОдноВходящееСообщение(ВходящееСообщение);						
		Исключение
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаголовокОшибки = "Обработка сообщения входящего (синхронная)";
			ЗафиксироватьОшибкуВходящего(ТекстОшибки, ВходящееСообщение, ЗаголовокОшибки, НастройкиДляВходящего);
			
			Результат = СтрШаблон(ШаблонОшибки, ТекущаяДатаСеанса(), ЗаголовокОшибки, Символы.ПС, ТекстОшибки);
			
		КонецПопытки;
	Иначе
		// Записать во входящую очередь 		
		Попытка
			ЗарегистрироватьВоВходящуюОчередь(ПараметрыОбмена, НастройкиДляВходящего);			
		Исключение
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаголовокОшибки = "Ошибка регистрации входящего сообщения в очереди";
			EUF_ПроводникВызовСервера.ВыполнитьЛогирование(ЗаголовокОшибки, УровеньЖурналаРегистрации.Ошибка, ТекстОшибки,
					ТипВходящегоСообщения, Истина, ВходящееСообщение);
					
			Результат = СтрШаблон(ШаблонОшибки, ТекущаяДатаСеанса(), ЗаголовокОшибки, Символы.ПС, ИнфоДляВнешнейСистемы);
			
		КонецПопытки;
	КонецЕсли;		
	
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		РезультатОбработки = Результат.Получить(ВходящееСообщение);
		Возврат РезультатОбработки;
	Иначе	
		Возврат Результат;
	КонецЕсли;	
	
КонецФункции	

Функция ИнициализироватьНастройкиДляВходящих()
	
	НастройкиВходящегоСообщения = Новый Структура;
	НастройкиВходящегоСообщения.Вставить("ВнешняяСистема");
	НастройкиВходящегоСообщения.Вставить("НастройкаСсылка", Неопределено);
	НастройкиВходящегоСообщения.Вставить("СинхронныйРежим", Ложь);
	НастройкиВходящегоСообщения.Вставить("СпособОбработкиВходящегоСообщения");
	НастройкиВходящегоСообщения.Вставить("ПодключаемаяОбработка");
	НастройкиВходящегоСообщения.Вставить("ТипВходящегоСообщения");
	НастройкиВходящегоСообщения.Вставить("ИнтеграционныйПроцесс");
	НастройкиВходящегоСообщения.Вставить("ТехническоеИмя", "");
	НастройкиВходящегоСообщения.Вставить("ДанныеВФорматеТранспорта");
	НастройкиВходящегоСообщения.Вставить("РежимОтладки", Ложь); 
	
	НастройкиВходящегоСообщения.Вставить("ИзрасходованоПопыток", 0);
	НастройкиВходящегоСообщения.Вставить("ДоступноПопытокОбработки", 1);
			
	Возврат НастройкиВходящегоСообщения;
	
КонецФункции

// Добавляются необходимые поля выборки по настройкам входящих.
// Используется для получения единого состава полей настроек.
//
// Параметры:
//  ОператорВыбора	 - ОператорыСхемыЗапроса - Операторы пакета запроса (из Схемы запроса)
//												СхемаЗапроса.ПакетЗапросов[n].Операторы[n]
//
Процедура ДобавитьПоляВыборкиНастроекВходящих(ОператорВыбора) Экспорт
	
	// Добавляются поля выборки в схеме запроса
	ОператорВыбора.ВыбираемыеПоля.Добавить("НастройкиПоТипамСообщений.ТипВходящегоСообщения");
	ОператорВыбора.ВыбираемыеПоля.Добавить("НастройкиПоТипамСообщений.СинхронныйРежим");
	ОператорВыбора.ВыбираемыеПоля.Добавить("НастройкиПоТипамСообщений.СпособОбработкиВходящегоСообщения");
	ОператорВыбора.ВыбираемыеПоля.Добавить("НастройкиПоТипамСообщений.ПодключаемаяОбработка");
	ОператорВыбора.ВыбираемыеПоля.Добавить("НастройкиПоТипамСообщений.ВнешняяСистема");
	ОператорВыбора.ВыбираемыеПоля.Добавить("НастройкиПоТипамСообщений.ДоступноПопытокОбработки");
	ОператорВыбора.ВыбираемыеПоля.Добавить("НастройкиПоТипамСообщений.РежимОтладки");
	ОператорВыбора.ВыбираемыеПоля.Добавить("НастройкиПоТипамСообщений.ТехническоеИмя");
	ОператорВыбора.ВыбираемыеПоля.Добавить("НастройкиПоТипамСообщений.ИнтеграционныйПроцесс");
	
КонецПроцедуры

// Используется общий запрос, для возможности вызова из обработки администрирования при ручной выгрузке
// 		ОсновнаяФорма -> Процедура ОбработатьВходящееСообщениеНаСервере()
//
// Возвращаемое значение:
//	Строка - текст запроса.
// 
Функция ТекстЗапросаВходящихСНастройкамиОбработки() Экспорт
	
	ТекстЗапроса = 	
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИспользуемыеНастройкиДляСообщенийСрезПоследних.ТипСообщения КАК Справочник.EUF_ПроводникТипВходящегоСообщения) КАК ТипВходящегоСообщения,
	|	ИспользуемыеНастройкиДляСообщенийСрезПоследних.НастройкаДляСообщения КАК НастройкаСсылка,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ИспользуемыеНастройкиДляСообщенийСрезПоследних.ТипСообщения КАК Справочник.EUF_ПроводникТипВходящегоСообщения).Владелец, НЕОПРЕДЕЛЕНО) КАК ВнешняяСистема
	|ПОМЕСТИТЬ ИспользуемыеНастройкиДляСообщений
	|ИЗ
	|	РегистрСведений.EUF_ПроводникИспользуемыеНастройкиДляСообщений.СрезПоследних(
	|			,
	|			ТипСообщения В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ТипыСообщений.ТипВходящегоСообщения КАК ТипВходящегоСообщения
	|				ИЗ
	|					ТипыСообщений КАК ТипыСообщений)) КАК ИспользуемыеНастройкиДляСообщенийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИспользуемыеНастройкиДляСообщений.ТипВходящегоСообщения КАК ТипВходящегоСообщения,
	|	ИспользуемыеНастройкиДляСообщений.ТипВходящегоСообщения.ИнтеграционныйПроцесс КАК ИнтеграционныйПроцесс,
	|	ИспользуемыеНастройкиДляСообщений.НастройкаСсылка КАК НастройкаСсылка,
	|	НастройкиВходящихСообщений.СинхронныйРежим КАК СинхронныйРежим,
	|	НастройкиВходящихСообщений.СпособОбработкиВходящегоСообщения КАК СпособОбработкиВходящегоСообщения,
	|	НастройкиВходящихСообщений.ОбработкаВходящего КАК ПодключаемаяОбработка,
	|	&РежимОтладки КАК РежимОтладки,
	|	ЕСТЬNULL(НастройкиВходящихСообщений.ДоступноПопытокОбработки, 1) КАК ДоступноПопытокОбработки,
	|	ИспользуемыеНастройкиДляСообщений.ВнешняяСистема КАК ВнешняяСистема,
	|	ЕСТЬNULL(ИспользуемыеНастройкиДляСообщений.ТипВходящегоСообщения.ТехническоеИмя, """") КАК ТехническоеИмя
	|ПОМЕСТИТЬ НастройкиПоТипамСообщений
	|ИЗ
	|	ИспользуемыеНастройкиДляСообщений КАК ИспользуемыеНастройкиДляСообщений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.EUF_ПроводникНастройкиВходящихСообщений КАК НастройкиВходящихСообщений
	|		ПО ИспользуемыеНастройкиДляСообщений.НастройкаСсылка = НастройкиВходящихСообщений.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипВходящегоСообщения";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьНастройкиВходящего(ТипВходящегоСообщения) Экспорт
	
	НастройкиВходящегоСообщения = ИнициализироватьНастройкиДляВходящих();
		
	Запрос = Новый Запрос;
	ТекстЗапроса =  
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТипВходящегоСообщения.Ссылка КАК ТипВходящегоСообщения
	|ПОМЕСТИТЬ ТипыСообщений
	|ИЗ
	|	Справочник.EUF_ПроводникТипВходящегоСообщения КАК ТипВходящегоСообщения
	|ГДЕ
	|	ТипВходящегоСообщения.Ссылка = &КонкретныйТипСообщения"
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ ТекстЗапросаВходящихСНастройкамиОбработки()
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ 
	"ВЫБРАТЬ
	|	НастройкиПоТипамСообщений.НастройкаСсылка КАК НастройкаСсылка
	|ИЗ
	|	НастройкиПоТипамСообщений КАК НастройкиПоТипамСообщений";
		
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);	
	ОператорВыбора = СхемаЗапроса.ПакетЗапросов[3].Операторы[0];
	
	ДобавитьПоляВыборкиНастроекВходящих(ОператорВыбора);
			
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонкретныйТипСообщения", ТипВходящегоСообщения);
	Запрос.УстановитьПараметр("РежимОтладки", Ложь);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(НастройкиВходящегоСообщения, Выборка); 	
		
	КонецЕсли;
	
	Возврат НастройкиВходящегоСообщения;
	
КонецФункции

Функция СоздатьВходящееСообщение(ПараметрыСообщения, ПараметрыОбмена) Экспорт
	
	ВходящееСообщение = Неопределено;
	
	ТипВходящегоСообщения = ПараметрыОбмена.ТипВходящегоСообщения;
	ДанныеВФорматеТранспорта = ПараметрыОбмена.ВходящиеДанные;
	ТипСодержимого = ПараметрыОбмена.ТипСодержимого;
			
	Если ПараметрыСообщения.Свойство("ВнешняяСистема") Тогда
		ВнешняяСистема = ПараметрыСообщения.ВнешняяСистема;
	Иначе
		ВнешняяСистема = EUF_ПроводникПовтИсп.ВнешняяСистемаПоТипуВходящегоСообщения(ТипВходящегоСообщения);
		ПараметрыСообщения.Вставить("ВнешняяСистема", ВнешняяСистема);
	КонецЕсли;
			
	СообщениеОбъект = Справочники.EUF_ПроводникСообщенияВходящие.СоздатьЭлемент();
	
	// Для возможности указания GUID в реквизите
	ИдентификаторСообщения = Новый УникальныйИдентификатор();
	НоваяСсылка = Справочники.EUF_ПроводникСообщенияВходящие.ПолучитьСсылку(ИдентификаторСообщения);
	СообщениеОбъект.УстановитьСсылкуНового(НоваяСсылка);
	
	СообщениеОбъект.ИдентификаторСообщения = ИдентификаторСообщения;
	СообщениеОбъект.ИдентификаторВоВнешнейСистеме = ПараметрыСообщения.ИдентификаторСообщенияВС;
	СообщениеОбъект.ТипСообщения 		= ТипВходящегоСообщения;
	СообщениеОбъект.ВнешняяСистема 		= ВнешняяСистема;
	СообщениеОбъект.СостояниеСообщения 	= Перечисления.EUF_ПроводникСостоянияВходящих.Зарегистрировано;	
	СообщениеОбъект.ДатаСоздания 		= ТекущаяДатаСеанса();
	СообщениеОбъект.УникальноеВремяСоздания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Попытка
		СообщениеОбъект.Записать();
		ВходящееСообщение = СообщениеОбъект.Ссылка;
		ПараметрыСообщения.Вставить("ВходящееСообщение", ВходящееСообщение);
		
		Если ЗначениеЗаполнено(ДанныеВФорматеТранспорта) Тогда
			// По умолчанию записывается в исходном формате от получателя.
			// Дальнейшая обработка может быть определена настройками.
			ЗаписатьДанныеОбменаВХранилище(ВходящееСообщение, ДанныеВФорматеТранспорта, ТипСодержимого);			
		КонецЕсли;
		
		Возврат ВходящееСообщение;
		
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		EUF_ПроводникВызовСервера.ВыполнитьЛогирование("Ошибка создания сообщения входящего",
					УровеньЖурналаРегистрации.Ошибка, ТекстОшибки,
					ТипВходящегоСообщения, Истина);
		ВызватьИсключение ТекстОшибки;			
	КонецПопытки;
	
	Возврат ВходящееСообщение;
	
КонецФункции

Процедура ЗарегистрироватьВоВходящуюОчередь(ПараметрыОбмена, НастройкиВходящегоОбращения) Экспорт
			 
	// Запись в регистре очереди
	МенеджерЗаписей = РегистрыСведений.EUF_ПроводникОчередьВходящих.СоздатьМенеджерЗаписи();	
	МенеджерЗаписей.ВнешняяСистема 		 = ПараметрыОбмена.ВнешняяСистема;
	МенеджерЗаписей.ТипСообщения		 = ПараметрыОбмена.ТипВходящегоСообщения;
	МенеджерЗаписей.ВходящееСообщение 	 = ПараметрыОбмена.ВходящееСообщение;	
	МенеджерЗаписей.ДоступноДляОбработки = Истина;	
	МенеджерЗаписей.СостояниеОчереди 	 = Перечисления.EUF_ПроводникСостоянияВходящих.Зарегистрировано;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	МенеджерЗаписей.ДатаРегистрации 			= ТекущаяДата;
	МенеджерЗаписей.День 						= День(ТекущаяДата);
	МенеджерЗаписей.ГодИМесяц 					= Формат(ТекущаяДата, "ДФ=yyyy_MM");	
	МенеджерЗаписей.УникальноеВремяРегистрации 	= ПараметрыОбмена.УникальноеВремяРегистрации;
	
	МенеджерЗаписей.Записать();
	
	ОписаниеСобытия = "Зарегистрировано сообщение во входящей очереди";
	EUF_ПроводникВызовСервера.ВыполнитьЛогирование("Регистрация во входящей очереди", УровеньЖурналаРегистрации.Информация,
								ОписаниеСобытия, ПараметрыОбмена.ТипВходящегоСообщения,
								Истина, ПараметрыОбмена.ВходящееСообщение);
	
КонецПроцедуры

// Используется экземплярами регламентного задания "EUF_ПроводникОбработкаВходящих" по настройкам
// 	для каждой внешней системы
//
// Параметры:
//  ВнешняяСистема	- ПланОбменаСсылка.EUF_ПроводникВнешниеСистемы - Разрез по внешней системе
//	ИДРеглЗадания	- Строка - Идентификатор регламентного задания
//
Процедура ОбработкаВходящихСообщенийРеглЗаданием(ВнешняяСистема, ИДРеглЗадания) Экспорт
	
	РеглЗадание = Метаданные.РегламентныеЗадания.EUF_ПроводникОбработкаВходящих;
	Доступно = EUF_ПроводникОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РеглЗадание,
																	ИДРеглЗадания, ВнешняяСистема);
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьВходящих.ТипСообщения КАК ТипВходящегоСообщения,
	|	ОчередьВходящих.ВходящееСообщение КАК ВходящееСообщение,
	|	ОчередьВходящих.УникальноеВремяРегистрации КАК УникальноеВремяРегистрации
	|ПОМЕСТИТЬ ПулВходящих
	|ИЗ
	|	РегистрСведений.EUF_ПроводникОчередьВходящих КАК ОчередьВходящих
	|ГДЕ
	|	ОчередьВходящих.ДоступноДляОбработки = ИСТИНА
	|	И ОчередьВходящих.СостояниеОчереди = &СостояниеОчереди
	|	И ОчередьВходящих.ВнешняяСистема = &ВнешняяСистема
	|	И ОчередьВходящих.ЕстьОшибки = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьВходящих.ТипСообщения,
	|	ОчередьВходящих.ВходящееСообщение,
	|	ОчередьВходящих.УникальноеВремяРегистрации
	|ИЗ
	|	РегистрСведений.EUF_ПроводникОчередьВходящих КАК ОчередьВходящих
	|ГДЕ
	|	ОчередьВходящих.ДоступноДляОбработки = ИСТИНА
	|	И ОчередьВходящих.СостояниеОчереди = &СостояниеОчереди
	|	И ОчередьВходящих.ВнешняяСистема = &ВнешняяСистема
	|	И ОчередьВходящих.ЕстьОшибки = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	УникальноеВремяРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПулВходящих.ТипВходящегоСообщения КАК ТипВходящегоСообщения
	|ПОМЕСТИТЬ ТипыСообщений
	|ИЗ
	|	ПулВходящих КАК ПулВходящих
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипВходящегоСообщения"	
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ ТекстЗапросаВходящихСНастройкамиОбработки()
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ 

	"ВЫБРАТЬ
	|	ПулВходящих.ВходящееСообщение КАК ВходящееСообщение,
	|	НастройкиПоТипамСообщений.НастройкаСсылка КАК НастройкаСсылка,
	|	ЕСТЬNULL(ДанныеВФорматеТранспорта.ДанныеОбмена, НЕОПРЕДЕЛЕНО) КАК ДанныеВФорматеТранспорта,
	|	ЕСТЬNULL(ДанныеВФорматеТранспорта.ОписаниеФормата, """") КАК ОписаниеФормата,
	|	ВЫРАЗИТЬ(ПулВходящих.ВходящееСообщение КАК Справочник.EUF_ПроводникСообщенияВходящие).СчетчикПопытокОбработки КАК ИзрасходованоПопыток,
	|	ПулВходящих.УникальноеВремяРегистрации КАК УникальноеВремяРегистрации
	|ИЗ
	|	ПулВходящих КАК ПулВходящих
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.EUF_ПроводникДанныеВФорматеТранспорта КАК ДанныеВФорматеТранспорта
	|		ПО ПулВходящих.ВходящееСообщение = ДанныеВФорматеТранспорта.Сообщение
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиПоТипамСообщений КАК НастройкиПоТипамСообщений
	|		ПО ПулВходящих.ТипВходящегоСообщения = НастройкиПоТипамСообщений.ТипВходящегоСообщения
	|
	|УПОРЯДОЧИТЬ ПО
	|	УникальноеВремяРегистрации";	
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	// ──────────────────────────────
	// Определяем количество выборки
	ПараметрыВнешнейСистемы = "КоличествоОбрабатываемыхВходящихБезОшибок, КоличествоОбрабатываемыхВходящихСОшибками";
	СтруктураРеквизитов = EUF_ПроводникШлюзБСПСервер.ЗначенияРеквизитовОбъекта(ВнешняяСистема, ПараметрыВнешнейСистемы);
	ВыбираемыеЗаписиБезОшибок = Макс(1, СтруктураРеквизитов.КоличествоОбрабатываемыхВходящихБезОшибок);
	ВыбираемыеЗаписиСОшибками = Макс(1, СтруктураРеквизитов.КоличествоОбрабатываемыхВходящихСОшибками);
		
	НомерПакета = 0;
	СхемаЗапроса.ПакетЗапросов[НомерПакета].Операторы[0].КоличествоПолучаемыхЗаписей = ВыбираемыеЗаписиБезОшибок;
	СхемаЗапроса.ПакетЗапросов[НомерПакета].Операторы[1].КоличествоПолучаемыхЗаписей = ВыбираемыеЗаписиСОшибками;
		
	// ──────────────────────────────
	// Определяем поля настроек
	ОператорВыбора = СхемаЗапроса.ПакетЗапросов[4].Операторы[0];	
	ДобавитьПоляВыборкиНастроекВходящих(ОператорВыбора);
			
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СостояниеОчереди", Перечисления.EUF_ПроводникСостоянияВходящих.Зарегистрировано);
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	Запрос.УстановитьПараметр("РежимОтладки", Ложь);
	
	ОбработкаВходящихСообщений(Запрос);
	
КонецПроцедуры

// Функция - Обработка входящих сообщений
//
// Параметры:
//  Запрос				 - Запрос	 - Запрос с определенной структурой, обеспечивающий выборку сообщений с настройками 
//  КонкретныйОбработчик - ВнешняяОбработка - Передается обработчик, обычно из формы отладки внешней обработки.
//										При указании будут использоваться его функции модуля объекта. 
// 
// Возвращаемое значение:
//  Произвольный - результат обработки
//
Функция ОбработкаВходящихСообщений(Запрос, КонкретныйОбработчик = Неопределено) Экспорт 		
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	НастройкиДляВходящего = ИнициализироватьНастройкиДляВходящих();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(НастройкиДляВходящего, Выборка);
		НастройкиДляВходящего.Вставить("КонкретныйОбработчик", КонкретныйОбработчик);
			
		ВходящееСообщение = Выборка.ВходящееСообщение;
		
		Попытка
			Результат = ОбработатьВходящееСообщение(ВходящееСообщение, НастройкиДляВходящего);			
			ЗафиксироватьОбработкуВходящего(ВходящееСообщение, НастройкиДляВходящего);
			
		Исключение
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаголовокОшибки = "Обработка входящего сообщения из очереди";
			ЗафиксироватьОшибкуВходящего(ТекстОшибки, ВходящееСообщение, ЗаголовокОшибки, НастройкиДляВходящего);
			Если Выборка.РежимОтладки Тогда
				EUF_ПроводникШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
			Результат.Вставить(ВходящееСообщение, ТекстОшибки);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьВходящееСообщение(ВходящееСообщение, НастройкиПоТипуСообщения) Экспорт

	Результат = Неопределено;
	
	СпособОбработки = НастройкиПоТипуСообщения.СпособОбработкиВходящегоСообщения;
	
	Если СпособОбработки = Перечисления.EUF_ПроводникСпособыПреобразованияСообщений.ПроизвольныйАлгоритм Тогда
		Результат = ВыполнитьОбработчикиВходящего(ВходящееСообщение, НастройкиПоТипуСообщения);		
	Иначе
		ТекстОшибки = "Не поддерживаемый способ обработки входящего сообщения (" + Строка(СпособОбработки) + ")";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Используется для обработки одного входящего сообщения
//
// Параметры:
//  ВходящееСообщение	 - СправочникСсылка.EUF_ПроводникСообщенияВходящие - Входящее сообщение 
//  РежимОтладки	 	 - Булево - используется для отладки, например для вывода сообщений
//  КонкретныйОбработчик - ВнешняяОбработка - Передается обработчик, обычно из формы отладки внешней обработки.
//										При указании будут использоваться его функции модуля объекта. 
// 
// Возвращаемое значение:
//  Произвольный - результат обработки 
//
Функция ОбработатьОдноВходящееСообщение(ВходящееСообщение, РежимОтладки = Ложь,
				КонкретныйОбработчик = Неопределено) Экспорт
	
	Реквизиты = EUF_ПроводникШлюзБСПСервер.ЗначенияРеквизитовОбъекта(ВходящееСообщение, "ВнешняяСистема");
	ВнешняяСистема = Реквизиты.ВнешняяСистема;
		
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СообщенияВходящие.ВнешняяСистема КАК ВнешняяСистема,
	|	СообщенияВходящие.Ссылка КАК ВходящееСообщение,
	|	СообщенияВходящие.УникальноеВремяСоздания КАК УникальноеВремяРегистрации,
	|	СообщенияВходящие.ТипСообщения КАК ТипВходящегоСообщения
	|ПОМЕСТИТЬ ПулВходящих
	|ИЗ
	|	Справочник.EUF_ПроводникСообщенияВходящие КАК СообщенияВходящие
	|ГДЕ
	|	СообщенияВходящие.Ссылка = &ВходящееСообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПулВходящих.ТипВходящегоСообщения КАК ТипВходящегоСообщения
	|ПОМЕСТИТЬ ТипыСообщений
	|ИЗ
	|	ПулВходящих КАК ПулВходящих"
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ ТекстЗапросаВходящихСНастройкамиОбработки() 
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ 

	"ВЫБРАТЬ
	|	ПулВходящих.ВходящееСообщение КАК ВходящееСообщение,
	|	НастройкиПоТипамСообщений.НастройкаСсылка КАК НастройкаСсылка,
	|	ЕСТЬNULL(ДанныеВФорматеТранспорта.ДанныеОбмена, НЕОПРЕДЕЛЕНО) КАК ДанныеВФорматеТранспорта,
	|	ЕСТЬNULL(ДанныеВФорматеТранспорта.ОписаниеФормата, """") КАК ОписаниеФормата,
	|	ВЫРАЗИТЬ(ПулВходящих.ВходящееСообщение КАК Справочник.EUF_ПроводникСообщенияВходящие).СчетчикПопытокОбработки КАК ИзрасходованоПопыток
	|ИЗ
	|	ПулВходящих КАК ПулВходящих
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.EUF_ПроводникДанныеВФорматеТранспорта КАК ДанныеВФорматеТранспорта
	|		ПО ПулВходящих.ВходящееСообщение = ДанныеВФорматеТранспорта.Сообщение
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиПоТипамСообщений КАК НастройкиПоТипамСообщений
	|		ПО ПулВходящих.ТипВходящегоСообщения = НастройкиПоТипамСообщений.ТипВходящегоСообщения";	
	
	Запрос.УстановитьПараметр("РежимОтладки", РежимОтладки);
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	Запрос.УстановитьПараметр("ВходящееСообщение", ВходящееСообщение);
	Запрос.УстановитьПараметр("КонкретныйТипСообщения", Неопределено);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса); 
		
	// ──────────────────────────────
	// Определяем поля настроек
	ОператорВыбора = СхемаЗапроса.ПакетЗапросов[4].Операторы[0];	
	ДобавитьПоляВыборкиНастроекВходящих(ОператорВыбора);
			
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();	
	Запрос.Текст = ТекстЗапроса; 
	
	Результат = ОбработкаВходящихСообщений(Запрос, КонкретныйОбработчик);
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьОбработчикиВходящего(ВходящееСообщение, Знач НастройкиПоТипуСообщения)
		
	Результат = Неопределено;
		
	НастройкаСсылка = НастройкиПоТипуСообщения.НастройкаСсылка;
	СтрРеквизитыОбработчика = "ВариантПроизвольногоОбработчика,
								|КодОбработкиСообщения,
								|ИмяВстроенногоОбработчика,
								|ОбработкаВходящего";
	РеквизитыОбработчика = EUF_ПроводникНаВремяВызоваПовтИсп.РеквизитыНастроекСообщений(НастройкаСсылка,
																					СтрРеквизитыОбработчика);
	ВариантОбработчика = РеквизитыОбработчика.ВариантПроизвольногоОбработчика;
	НастройкиПоТипуСообщения.Вставить("ВариантОбработчика", ВариантОбработчика); // Для условий в модуле обработки
	
	ИспользуетсяКонкретныйОбработчик = НастройкиПоТипуСообщения.Свойство("КонкретныйОбработчик")
			И НастройкиПоТипуСообщения.КонкретныйОбработчик <> Неопределено;
			
	Если ИспользуетсяКонкретныйОбработчик Тогда
				
		ОбработкаОбъект = НастройкиПоТипуСообщения.КонкретныйОбработчик;
		
	ИначеЕсли ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ПодключаемыйОбработчик
		Тогда
		
		ПодключаемаяОбработка = РеквизитыОбработчика.ОбработкаВходящего;
		ОбработкаОбъект = EUF_ПроводникШлюзБСПСервер.ОбъектВнешнейОбработки(ПодключаемаяОбработка);
		
	ИначеЕсли ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ВстроенныйОбработчик 
		Тогда	
		
		ОбработкаОбъект = Обработки[РеквизитыОбработчика.ИмяВстроенногоОбработчика].Создать();
		
	Иначе
		ОбработкаОбъект = Неопределено;	
	КонецЕсли; 
	
	// Выполнение кода
	Попытка	
		Если ИспользуетсяКонкретныйОбработчик
			Или ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ПодключаемыйОбработчик
			Или ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ВстроенныйОбработчик
			Тогда
			
			Результат = ОбработкаОбъект.ОбработатьВходящееСообщение(ВходящееСообщение, НастройкиПоТипуСообщения);
			
		ИначеЕсли ВариантОбработчика = Перечисления.EUF_ПроводникВариантыПроизвольногоОбработчика.ПроизвольныйКод Тогда
			
			ИсполняемыйКод = РеквизитыОбработчика.КодОбработкиСообщения;
			УстановитьБезопасныйРежим(Истина);
			Выполнить(ИсполняемыйКод); 
				 
		Иначе
			ВызватьИсключение "Неизвестный вариант произвольного обработчика. ";
		КонецЕсли;	
	Исключение 
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон("Ошибка выполнения кода обработки входящего сообщения %1 %2",
								Символы.ПС, ОписаниеОшибки);
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗафиксироватьОбработкуВходящего(ВходящееСообщение, ПараметрыВыгрузкиВходящих) Экспорт
	
	Если Не ПараметрыВыгрузкиВходящих.СинхронныйРежим Тогда
		
		НаборЗаписей = РегистрыСведений.EUF_ПроводникОчередьВходящих.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ВходящееСообщение.Установить(ВходящееСообщение);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() Тогда
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.ЕстьОшибки 			= Ложь;
				Запись.Комментарий 			= "";
				Запись.ДоступноДляОбработки = Ложь;
				Запись.СостояниеОчереди = Перечисления.EUF_ПроводникСостоянияВходящих.Обработано;				
			КонецЦикла;	
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
	КонецЕсли;

	ОбВходящееСообщение = ВходящееСообщение.ПолучитьОбъект();
	ОбВходящееСообщение.СостояниеСообщения = Перечисления.EUF_ПроводникСостоянияВходящих.Обработано;
	ОбВходящееСообщение.ЕстьОшибки = Ложь;	
	ОбВходящееСообщение.Комментарий = "";
	ОбВходящееСообщение.Записать();
	
	ТекстИнформации = "Завершена обработка входящего сообщения";
	EUF_ПроводникВызовСервера.ВыполнитьЛогирование("Обработка сообщения входящего",
					УровеньЖурналаРегистрации.Информация, ТекстИнформации, ПараметрыВыгрузкиВходящих.ТипВходящегоСообщения,
					Истина, ВходящееСообщение);
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуВходящего(ТекстОшибки, ВходящееСообщение, Заголовок, НастройкиВходящего) Экспорт
	
	ИзрасходованоПопыток = НастройкиВходящего.ИзрасходованоПопыток + 1;
	
	ОбСообщение = ВходящееСообщение.ПолучитьОбъект();
	ОбСообщение.ЕстьОшибки	= Истина;
	ОбСообщение.Комментарий = ТекстОшибки;
	ОбСообщение.СчетчикПопытокОбработки = ИзрасходованоПопыток;
	ОбСообщение.Записать();
	
	Если Не НастройкиВходящего.СинхронныйРежим Тогда
		
		НаборЗаписей = РегистрыСведений.EUF_ПроводникОчередьВходящих.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.ВходящееСообщение.Установить(ВходящееСообщение);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() Тогда
			
			НеИсключать = НастройкиВходящего.ДоступноПопытокОбработки - ИзрасходованоПопыток > 0;
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.ЕстьОшибки	= Истина;
				Запись.Комментарий	= ТекстОшибки;
				Запись.ДоступноДляОбработки = НеИсключать;
			КонецЦикла;	
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
	КонецЕсли; 
	
	EUF_ПроводникВызовСервера.ВыполнитьЛогирование(Заголовок,
					УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, ВходящееСообщение,
					Истина, ВходящееСообщение);
	
КонецПроцедуры

#КонецОбласти // ВходящиеОбращения

Процедура ЗаписатьДанныеОбменаВХранилище(Сообщение, ДанныеВФорматеТранспорта, ОписаниеФормата = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеСжато = Новый ХранилищеЗначения(ДанныеВФорматеТранспорта, Новый СжатиеДанных(9));			
	МенеджерЗаписей = РегистрыСведений.EUF_ПроводникДанныеВФорматеТранспорта.СоздатьМенеджерЗаписи();
	МенеджерЗаписей.Сообщение = Сообщение;		
	МенеджерЗаписей.ДанныеОбмена = ДанныеСжато; 
	МенеджерЗаписей.ОписаниеФормата = ОписаниеФормата; 
	
	МенеджерЗаписей.Записать(); 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьДанныеФорматаТранспорта(Сообщение) Экспорт

	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеВФорматеТранспорта.ДанныеОбмена КАК ДанныеОбмена
	|ИЗ
	|	РегистрСведений.EUF_ПроводникДанныеВФорматеТранспорта КАК ДанныеВФорматеТранспорта
	|ГДЕ
	|	ДанныеВФорматеТранспорта.Сообщение = &Сообщение";
	Запрос.УстановитьПараметр("Сообщение", Сообщение);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда		
		Результат = Выборка.ДанныеОбмена;					
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область Вспомогательные //**********************************************
 
// Используется экземплярами регламентного задания "EUF_ПроводникУдалениеНеактуальныхДанных" по настройкам
//  для каждой внешней системы. Удаляет зарегистрированные сообщения - входящие и исходящие
//                                                                                 
// Параметры:
//  ВнешняяСистема	- ПланОбменаСсылка.EUF_ПроводникВнешниеСистемы - Разрез по внешней системе
//	ИДРеглЗадания	- Строка - Идентификатор регламентного задания
//
Процедура УдалениеНеактуальныхДанных(ВнешняяСистема, ИДРеглЗадания) Экспорт
	
	РеглЗадание = Метаданные.РегламентныеЗадания.EUF_ПроводникУдалениеНеактуальныхДанных;
	Доступно = EUF_ПроводникОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РеглЗадание,
														ИДРеглЗадания, ВнешняяСистема);
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	EUF_ПроводникСообщенияВходящие.Ссылка КАК Ссылка,
	|	EUF_ПроводникСообщенияВходящие.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	EUF_ПроводникСообщенияВходящие.ДатаСоздания КАК ДатаСоздания,
	|	1 КАК ТипСообщения
	|ИЗ
	|	Справочник.EUF_ПроводникСообщенияВходящие КАК EUF_ПроводникСообщенияВходящие
	|ГДЕ
	|	EUF_ПроводникСообщенияВходящие.ДатаПоследнегоИзменения < &ДатаГраницаХранения
	|	И EUF_ПроводникСообщенияВходящие.ВнешняяСистема = &ВнешняяСистема
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	EUF_ПроводникСообщенияИсходящие.Ссылка,
	|	EUF_ПроводникСообщенияИсходящие.ИдентификаторСообщения,
	|	EUF_ПроводникСообщенияИсходящие.ДатаСоздания,
	|	2
	|ИЗ
	|	Справочник.EUF_ПроводникСообщенияИсходящие КАК EUF_ПроводникСообщенияИсходящие
	|ГДЕ
	|	EUF_ПроводникСообщенияИсходящие.ДатаПоследнегоИзменения < &ДатаГраницаХранения
	|	И EUF_ПроводникСообщенияИсходящие.ВнешняяСистема = &ВнешняяСистема
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания"; 
	
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	
	// ──────────────────────────────
	// Определяем количество выборки
	ПараметрыВнешнейСистемы = "СрокХраненияСообщенийВДнях, КоличествоУдаляемыхСообщений";
	СтруктураРеквизитов = EUF_ПроводникШлюзБСПСервер.ЗначенияРеквизитовОбъекта(ВнешняяСистема, ПараметрыВнешнейСистемы);
	СрокХраненияСообщенийВДнях 		= СтруктураРеквизитов.СрокХраненияСообщенийВДнях; 
	КоличествоУдаляемыхСообщений 	= СтруктураРеквизитов.КоличествоУдаляемыхСообщений;
	
	ДатаГраницаХранения = Дата(НачалоДня(ТекущаяДатаСеанса()) - СрокХраненияСообщенийВДнях * 24 * 60 * 60);
	Запрос.УстановитьПараметр("ДатаГраницаХранения", ДатаГраницаХранения);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	НомерПакета = 0;
	СхемаЗапроса.ПакетЗапросов[НомерПакета].Операторы[0].КоличествоПолучаемыхЗаписей = КоличествоУдаляемыхСообщений; 
	СхемаЗапроса.ПакетЗапросов[НомерПакета].Операторы[1].КоличествоПолучаемыхЗаписей = КоличествоУдаляемыхСообщений;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();	
	// ──────────────────────────────
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(); 
	МетаданныеСообщенияВх = Метаданные.Справочники.EUF_ПроводникСообщенияВходящие;
	МетаданныеСообщенияИсх = Метаданные.Справочники.EUF_ПроводникСообщенияИсходящие;
	СоответствиеМетаданным = Новый Соответствие;
	СоответствиеМетаданным.Вставить(1, МетаданныеСообщенияВх);
	СоответствиеМетаданным.Вставить(2, МетаданныеСообщенияИсх);
	
	Пока Выборка.Следующий() Цикл
		
		МетаДанныеПоСообщению = СоответствиеМетаданным.Получить(Выборка.ТипСообщения);
		Попытка 			
			СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СообщениеОбъект.Удалить();
		Исключение
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("EUF_Проводник Удаление неактуальных данных", УровеньЖурналаРегистрации.Предупреждение,
					МетаДанныеПоСообщению, Выборка.Ссылка, ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла; 	
	
КонецПроцедуры

#КонецОбласти // Вспомогательные

#КонецОбласти // СлужебныеПроцедурыИФункции 
